searchState.loadedDescShard("esp_idf_hal", 0, "CAN bus peripheral control.\nDelay providers.\nGPIO and pin configuration\nDriver for the Inter-IC Sound (I2S) peripheral(s).\nError types\nLED Control peripheral (which also creates PWM signals for …\nThe prelude.\nReset reasons\nRemote Control (RMT) module driver.\nESP ROM libraries\nSPI peripheral control\nControls UART peripherals (UART0, UART1, UART2). Notice …\nUnits of measurement implementation for times and …\nThe sampling/readout resolution of the ADC\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\n@brief ADC attenuation parameter. Different parameters …\n&lt;No input attenuation, ADC can measure up to approx.\n&lt;The input voltage of ADC will be attenuated extending the …\n&lt;The input voltage of ADC will be attenuated extending the …\n&lt;The input voltage of ADC will be attenuated extending the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCAN abstraction\nMessage’s Data length code is larger than 8. This will …\nMessage is in Extended Frame Format (29bit ID)\nTwai message flags\nMessage is a Remote Frame (Remote Transmission Request)\nTransmit message using Self Reception Request (Transmitted …\nTransmit message using Single Shot Transmission (Message …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nFilter for two 11 bit standard CAN IDs\nFilter for 29 bit extended CAN IDs\nIs used to filter out unwanted CAN IDs (messages).\nFilter for 11 bit standard CAN IDs\nCAN timing\nFilter that accepts all extended CAN IDs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFilter that allows all standard CAN IDs.\nReturns the number of cores supported by the esp32* chip\nReturns the currently active core ID On single-core …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSentinel value used as “maximum delay” or “maximum …\nA delay provider that uses <code>Ets</code> for delays below a certain …\nEspressif’s built-in delay provider for small delays\nFreeRTOS-based delay provider for delays larger than 10 ms.\nSentinel value used as “no delay” or “no blocking” …\nThe configured OS tick rate in Hz. There are TICK_RATE_HZ …\nTransparent wrapper around TickType_t with conversion …\nThe raw OS tick type. Also see TickType.\nConvert the number of ticks to a number of milliseconds. …\nConvert the number of ticks to a number of milliseconds …\nPauses execution for at minimum <code>ms</code> milliseconds. The delay …\nPauses execution for at minimum <code>ms</code> milliseconds. The delay …\nPauses execution for at minimum <code>ms</code> milliseconds. The delay …\nPauses execution for at minimum <code>us</code> microseconds. The delay …\nPauses execution for at minimum <code>us</code> microseconds. The delay …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a TickType from a number of ticks.\nCreate a Delay with a threshold of the specified amount of …\nCreate a Delay with a default threshold of 1 ms.\nConstruct a TickType from a number of milliseconds. This …\nGet the number of ticks.\nA marker trait designating a pin which is capable of …\nGeneric Gpio input-output pin\nGeneric Gpio input pin\nGeneric Gpio output pin\nDrive strength (values are approximates)\nA marker trait designating a pin which is capable of …\nA marker trait designating a pin which is capable of …\nInterrupt types\nDigital input or output level.\nA marker trait designating a pin which is capable of …\nA trait implemented by every pin instance\nA driver for a GPIO pin.\nA marker trait designating a pin which is capable of …\nCreates the driver for a pin in disabled state.\nEnables or re-enables the interrupt\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates the driver for a pin in input state.\nCreates the driver for a pin in input-output state.\nCreates the driver for a pin in input-output open-drain …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPut the pin into disabled mode.\nPut the pin into input mode.\nPut the pin into input + output mode.\nPut the pin into input + output Open Drain mode.\nPut the pin into output mode.\nPut the pin into output Open Drain mode.\nIs the output pin set as low?\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nCreates an <code>Option&lt;AnyIOPin&gt;::None</code> for pins that are …\nCreates an <code>Option&lt;AnyInputPin&gt;::None</code> for pins that are …\nCreates an <code>Option&lt;AnyOutputPin&gt;::None</code> for pins that are …\nCreates the driver for a pin in output state.\nCreates the driver for a pin in output open-drain state.\nReturns the pin number.\nSet the output as low.\nSubscribes the provided callback for ISR notifications. As …\nSubscribes the provided callback for ISR notifications. As …\nToggle pin output\nI2C operation.\nRead data into the provided buffer.\nWrite data from the provided buffer.\nI2C configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConversion for newer esp models, be aware, that the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nI2C Master configuration\nI2C Slave configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait implemented by I2S peripherals to obtain their port …\nConcrete implementation of both <code>I2sRxSupported</code> and …\nI2S channel base configuration.\nInter-IC Sound (I2S) driver.\nReference for I2S driver\nConcrete implementation of <code>I2sRxSupported</code> for use in …\nMarker trait indicating that a driver supports receiving …\nConcrete implementation of <code>I2sTxSupported</code> for use in …\nMarker trait indicating that a driver supports …\nBorrow the I2S driver by a reference\nI2S configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nCreate a new pulse density modulation (PDM) mode driver …\nCreate a new standard mode driver for the given I2S …\nCreate a new standard mode driver for the given I2S …\nCreate a new standard mode driver for the given I2S …\nCreate a new TDM mode driver for the given I2S peripheral …\nCreate a new TDM mode driver for the given I2S peripheral …\nCreate a new TDM mode driver for the given I2S peripheral …\nReturn the port number for the peripheral.\nReturns the I2S port number of this driver.\nPreload data into the transmit channel DMA buffer.\nRead data from the channel.\nRead data from the channel asynchronously.\nRead data from the channel into an uninitalized buffer.\nRead data from the channel into an uninitalized buffer …\nDisable the I2S receive channel.\nEnable the I2S receive channel.\nSplit the bidirectional I2S driver into two parts (Rx, Tx)\nDisable the I2S transmit channel.\nEnable the I2S transmit channel.\nWrite data to the channel.\nWrite all data to the channel.\nWrite all data to the channel asynchronously.\nWrite data to the channel asynchronously.\nSlot bit width is automatically set to the data bit width.\nChannel data bit width is 16 bits.\nSlot bit width is 16 bits.\nChannel data bit width is 24 bits.\nSlot bit width is 24 bits.\nChannel data bit width is 32 bits.\nSlot bit width is 32 bits.\nChannel data bit width is 8 bits.\nSlot bit width is 8 bits.\nI2S transmits or receives both slots.\nI2S transmits or receives both slots.\nI2S clock source.\nI2S common channel configuration.\nController (master)\nThe default number of DMA buffers to use.\nThe default number of frames per DMA buffer.\nAvailable data bit width in one slot.\nDivide the PDM signal by 2.\nI2S transmits or receives the left slot.\nI2S transmits or receives the left slot.\nMCLK = sample rate * 128\nMCLK = sample rate * 256\nMCLK = sample rate * 384\nMCLK = sample rate * 512\nMaximum downsample rate.\nThe multiple of MCLK to the sample rate.\nMono mode:\nMSB-aligned format (data present at first bit clock).\nMultiply the PDM signal by 2.\nMultiply the PDM signal by 4.\nNo scaling.\nStandard PDM format output: left and right slot data on a …\nPDM DAC format output: left or right slot data on a single …\nPCM long standard. Word select is the same as the data bit …\nPCM short standard. Word select is one bit clock.\nI2S pulse density modulation (PDM) downsampling mode.\nPulse density modulation (PDM) mode receive clock …\nPulse density modulation (PDM) mode receive configuration …\nPDM mode GPIO (general purpose input/output) receive …\nPDM mode channel receive slot configuration.\nPulse density modulation (PDM) transmit signal scaling …\nI2S slot selection in PDM mode.\nThe I2s pulse density modulation (PDM) mode transmit clock …\nThe I2S pulse density modulation (PDM) mode transmit …\nPDM mode GPIO (general purpose input/output) transmit …\nI2S pulse density modulation (PDM) transmit line mode\nPDM mode channel transmit slot configuration.\nStandard I2S/Philips format.\nUse PLL_F160M as the source clock\nI2S transmits or receives the right slot.\nI2S transmits or receives the right slot.\nI2S channel operating role\nThe maximum number of data input pins that can be used in …\nDownsample 16 samples.\nDownsample 8 samples.\nTDM slot #0\nTDM slot #1\nTDM slot #10\nTDM slot #11\nTDM slot #12\nTDM slot #13\nTDM slot #14\nTDM slot #15\nTDM slot #2\nTDM slot #3\nTDM slot #4\nTDM slot #5\nTDM slot #6\nTDM slot #7\nTDM slot #8\nTDM slot #9\nThe total slot bit width in one slot.\nI2S channel slot mode.\nStandard mode channel clock configuration.\nThe communication format used by the v4 driver.\nStandard mode configuration for the I2S peripheral.\nStandard mode GPIO (general purpose input/output) …\nStandard mode channel slot configuration.\nI2S slot selection in standard mode.\nStereo mode:\nAutomatic total number of slots, equivalent to the maximum …\nAutomatic word-select signal width, equivalent to half the …\nThe minimum division from MCLK to BCLK.\nTarget (slave)\nTDM mode channel clock configuration.\nTime-division multiplexing (TDM) mode configuration for …\nTDM mode GPIO (general purpose input/output) configuration.\nAn individual TDM slot.\nTDM mode slot configuration.\nMask of TDM slots to enable.\nPDM DAC format output: left and right slot data on …\nSet if the transmit buffer will be automatically cleared …\nSet the MCLK to BCLK division on this TDM clock …\nSet the BCLK inversion flag on this standard GPIO …\nSet the BCLK inversion flag on this TDM GPIO configuration.\nUpdate the big-endian flag on this standard slot …\nUpdate the big-endian flag on this TDM slot configuration.\nUpdate the LSB-first flag on this standard slot …\nUpdate the LSB-first flag on this TDM slot configuration.\nUpdate the bit shift flag on this standard slot …\nUpdate the bit shift flag on this TDM slot configuration.\nSet the clock inversion flag on this PDM GPIO …\nSet the clock inversion flag on this PDM GPIO transmit …\nSet the clock source on this PDM receive clock …\nSet the clock source on this PDM mode transmit clock …\nSet the clock source on this standard clock configuration.\nSet the clock source on this TDM clock configuration.\nUpdate the data bit width on this PDM receive slot …\nUpdate the data bit width on this standard slot …\nUpdate the data bit width on this TDM slot configuration.\nSet the number of DMA buffers to use.\nSet the downsampling mode on this PDM receive clock …\nSet the number of I2S frames in one DMA buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure the PDM mode channel receive slot configuration …\nCreates a <code>TdmSlotMask</code> from the raw bit mask value.\nCreate a PDM clock configuration with the specified sample …\nCreate a new PDM mode transmit clock configuration from …\nCreate a standard clock configuration with the specified …\nCreate a TDM clock configuration with the specified rate …\nConfigure the PDM mode channel transmit slot configuration …\nSets the high-pass filter cutoff frequency on this PDM …\nSets the high-pass filter enable on this PDM transmit slot …\nSets the high-pass filter scaling on this PDM transmit …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether this slot mask is empty.\nUpdate the left-alignment flag on this standard slot …\nUpdate the left-alignment flag on this TDM slot …\nReturns the number of slots in the slot mask.\nSets the PDM transmit line mode on this PDM transmit slot …\nSets the low-pass filter scaling on this PDM transmit slot …\nReturns the mask value as a <code>u16</code>.\nSet the MCLK inversion flag on this standard GPIO …\nSet the MCLK inversion flag on this TDM GPIO configuration.\nSet the MCLK multiple on this PDM receive clock …\nSet the MCLK multiple on this PDM mode transmit clock …\nSet the MCLK multiple on this standard clock configuration.\nSet the MCLK multiple on this TDM clock configuration.\nCreate a new standard mode channel configuration for the …\nConfigure in MSB format in 2 slots.\nConfigure in MSB format with the active slots enabled by …\nCreate a new standard mode channel configuration from the …\nCreate a new PDM mode receive configuration from the …\nCreate a new PDM mode GPIO receive configuration with the …\nCreate a new PDM mode transmit configuration from the …\nCreate a new PDM mode GPIO transmit configuration with the …\nCreate a standard clock configuration with the specified …\nCreate a new standard mode GPIO configuration with the …\nCreate a new TDM mode channel configuration from the given …\nCreate a TDM clock configuration with the specified rate …\nCreate a new TDM mode GPIO configuration with the …\nCreate a new Config with the default settings.\nCreate a new standard mode channel configuration for the …\nConfigure in PCM (long) format with the active slots …\nConfigure in PCM (short) format with the active slots …\nConfigure in PCM (short) format in 2 slots.\nCreate a new standard mode channel configuration for the …\nConfigure in Philips format in 2 slots.\nConfigure in Philips format with the active slots enabled …\nSet the role of this channel: controller (master) or …\nSet the sample rate on this PDM mode transmit clock …\nSets the sigma-delta filter dither on this PDM transmit …\nSets the sigma-delta filter prescale on this PDM transmit …\nSets the sigma-delta filter scaling on this PDM transmit …\nSets the sinc filter scaling on this PDM transmit slot …\nUpdate the skip mask flag on this TDM slot configuration.\nUpdate the slot bit width on this PDM receive slot …\nUpdate the slot bit width on this standard slot …\nUpdate the slot bit width on this TDM slot configuration.\nUpdate the slot mask on this TDM slot configuration.\nSets the slot mode on this PDM transmit slot configuration.\nUpdate the slot mode and mask on this PDM receive slot …\nUpdate the slot mode and mask on this standard slot …\nUpdate the total number of slots on this TDM slot …\nSet the upsampling parameters on this PDM mode transmit …\nSet the WS inversion flag on this standard GPIO …\nSet the WS inversion flag on this TDM GPIO configuration.\nUpdate the word select signal polarity on this standard …\nUpdate the word select signal polarity on this TDM slot …\nUpdate the word select signal width on this standard slot …\nUpdate the word select signal width on this TDM slot …\nInterrupt allocation flags. These flags can be used to …\nFor backwards compatibility\nReturns true if the currently active core is executing an …\nDrops the critical section guard thus potentially …\nDisables all interrupts for the lifetime of the returned …\nExecutes closure f in an interrupt-free context\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>IsrCriticalSection</code> instance\nSafety\nThe HAL-global wake runner. You should use no more than 64 …\nSingle-slot lock-free signaling primitive supporting …\nSingle-slot lock-free signaling primitive supporting …\nIsrReactor is a utility allowing <code>Waker</code> instances to be …\nWake runner configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the wake runner is started.\nCreate a new <code>IsrReactor</code> instance.\nCreates a new <code>IsrNotification</code>. This method is safe to call …\nCreates a new <code>HalIsrNotification</code>. This method is safe to …\nMarks the supplied bits in this <code>IsrNotification</code> as …\nMarks the supplied bits in this <code>HalIsrNotification</code> as …\nMarks the least significant bit (bit 0) in this …\nMarks the least significant bit (bit 0) in this …\nNon-blocking method to check whether this notification has …\nNon-blocking method to check whether this notification has …\nClears the state of this notification by removing any …\nClears the state of this notification by removing any …\nSchedules a waker to be awoken by the hidden FreeRTOS task …\nStarts the wake runner. Returns <code>false</code> if it had been …\nStops the wake runner. Returns <code>false</code> if it had been …\nFuture that completes when this <code>IsrNotification</code> has been …\nFuture that completes when this <code>HalIsrNotification</code> has …\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nThe operation failed because a pipe was closed.\nBlocking buffered reader.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nSets the offset to the current position plus the specified …\nSets the offset to the size of this object plus the …\nError trait.\nError type of all the IO operations on this type.\nPossible kinds of errors.\nBase trait for all IO traits, defining the error type.\nAn error was encountered while formatting.\nThe target slice was full and so could not receive any new …\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA parameter was incorrect.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nUnspecified error kind.\nError returned by the inner Read.\nError returned by the inner Write.\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nBlocking reader.\nError returned by <code>Read::read_exact</code>\nGet whether a reader is ready.\nBlocking seek within streams.\nEnumeration of possible methods to seek within an I/O …\nErrors that could be returned by <code>Write</code> on <code>&amp;mut [u8]</code>.\nSets the offset to the provided number of bytes.\nThe I/O operation’s timeout expired, causing it to be …\nAn EOF error was encountered before reading the exact …\nThis operation is unsupported on this platform.\nBlocking writer.\nError returned by <code>Write::write_fmt</code>\nGet whether a writer is ready.\nAn attempted write could not write any data.\nTell this buffer that <code>amt</code> bytes have been consumed from …\nReturn the contents of the internal buffer, filling it …\nFlush this output stream, blocking until all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the kind of this error.\nRead some bytes from this source into the specified …\nRead the exact number of bytes required to fill <code>buf</code>.\nGet whether the reader is ready for immediately reading.\nRewind to the beginning of a stream.\nSeek to an offset, in bytes, in a stream.\nReturns the current seek position from the start of the …\nWrite a buffer into this writer, returning how many bytes …\nWrite an entire buffer into this writer.\nWrite a formatted string into this writer, returning any …\nGet whether the writer is ready for immediately writing.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nThe operation failed because a pipe was closed.\nAsync buffered reader.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nSets the offset to the current position plus the specified …\nSets the offset to the size of this object plus the …\nError trait.\nError type of all the IO operations on this type.\nPossible kinds of errors.\nBase trait for all IO traits, defining the error type.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA parameter was incorrect.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nUnspecified error kind.\nError returned by the inner Read.\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nAsync reader.\nError returned by <code>Read::read_exact</code>\nGet whether a reader is ready.\nAsync seek within streams.\nEnumeration of possible methods to seek within an I/O …\nSets the offset to the provided number of bytes.\nThe I/O operation’s timeout expired, causing it to be …\nAn EOF error was encountered before reading the exact …\nThis operation is unsupported on this platform.\nAsync writer.\nGet whether a writer is ready.\nAn attempted write could not write any data.\nTell this buffer that <code>amt</code> bytes have been consumed from …\nReturn the contents of the internal buffer, filling it …\nFlush this output stream, ensuring that all intermediately …\nGet the kind of this error.\nRead some bytes from this source into the specified …\nRead the exact number of bytes required to fill <code>buf</code>.\nGet whether the reader is ready for immediately reading.\nRewind to the beginning of a stream.\nSeek to an offset, in bytes, in a stream.\nReturns the current seek position from the start of the …\nWrite a buffer into this writer, returning how many bytes …\nWrite an entire buffer into this writer.\nGet whether the writer is ready for immediately writing.\nThe LED Control device peripheral\nLED Control peripheral output channel\nLED Control driver\nLED Control peripheral timer\nLED Control timer driver\nLow speed mode for the LED Control peripheral\nSpeed mode for the LED Control peripheral The ESP32 …\nTypes for configuring the LED Control peripheral\nApplies LEDC configuration with a specific pin Can be used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new LED Control driver\nCreates a new instance of the LEDC peripheral. Typically …\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nPauses the timer. Operation can be resumed with […\nResumes the operation of the previously paused timer\nSet the frequency of the timer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nSafety\nPeripheral singleton type\nTrait for any type that can be used as a peripheral of …\nAn exclusive reference to a peripheral.\nUnsafely clone (duplicate) a peripheral singleton.\nUnsafely clone (duplicate) a peripheral singleton.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert a value into a <code>PeripheralRef</code>.\nMap the inner peripheral using <code>Into</code>.\nReborrow into a “child” PeripheralRef.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nBrownout reset (software or hardware)\nReset after exiting deep sleep mode\nReset by external pin\nReset (software or hardware) due to interrupt watchdog\nSoftware reset due to exception/panic\nReset due to power-on event\nReset reasons\nReset over SDIO\nSoftware restart via <code>esp_restart()</code>\nReset due to task watchdog\nReset reason can not be determined\nWakeup reasons\nReset due to other watchdogs\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the reason for the last reset\nGet the reason for the wakeup\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStack based signal storage for an RMT signal.\nA <code>Low</code> (0) or <code>High</code> (1) state for a pin.\nA <code>Pulse</code> contains a pin state and a tick count, used in …\nNumber of ticks, restricting the range to 0 to 32,767.\nRMT peripheral channel.\nThe RMT receiver.\nSignal storage for [<code>Transmit</code>] in a format ready for the …\nSymbols\nThe RMT transmitter driver.\n<code>Vec</code> heap based storage for an RMT signal.\nChannel can work during APB clock scaling.\nChannel can work during APB clock scaling.\nDelete all pulses.\nTypes used for configuring the <code>rmt</code> module.\nGet speed of the channel’s internal counter clock.\nStop transmitting and release the driver.\nStop receiving and release the driver.\nA utility to convert a duration into ticks, depending on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnable and set the signal level on the output if idle.\nEnable and set the signal level on the output if idle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse the maximum value of 32767.\nInitialise the rmt module with the specified pin, channel …\nInitialise the rmt module with the specified pin, channel …\nCreates a new instance of the RMT peripheral. Typically …\nNeeds to be unsigned 15 bits: 0-32767 inclusive, otherwise …\nCreate a symbol from a pair of half-cycles.\nCreates a new array of size <code>&lt;N&gt;</code>, where the number of …\nSafety\nSafety\nSafety\nSafety\nCreate a <code>Pulse</code> using a <code>Duration</code>.\nConvert a <code>Duration</code> into <code>PulseTicks</code>.\nAdd <code>Pulse</code>s to the end of the signal.\nSet a pair of <code>Pulse</code>s at a position in the array.\nStart sending the given signal without blocking.\nStart receiving\nStart sending the given signal while blocking.\nTransmit all items in <code>iter</code> without blocking.\nTransmit all items in <code>iter</code>, blocking until all items are …\nStop transmitting.\nStop receiving\nA utility to convert ticks into duration, depending on the …\nMutate this symbol to store a different pair of …\nCreate a new <code>VariableLengthSignal</code> with a a given capacity. …\nConfiguration for when enabling a carrier frequency.\nA percentage from 0 to 100%, used to specify the duty …\nConfiguration setting for looping a signal.\nUsed when creating a <code>Receive</code> instance.\nUsed when creating a [<code>Transmit</code>][crate::rmt::Transmit] …\nChannel can work during APB clock scaling.\nLevel of the RMT output, when the carrier is applied.\nDefaults from …\nDefaults from …\nDefaults from …\nDuty cycle of the carrier signal in percent (%).\nFrequency of the carrier in Hz.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnable and set the signal level on the output if idle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMust be between 0 and 100, otherwise an error is returned.\nCyclic Redundancy Check\nLeft-shifting CRC-16 with polynomial 0x1021\nRight-shifting CRC-16 with polynomial 0x1021\nLeft-shifting CRC-32 with polynomial 0x04c11db7\nRight-shifting CRC-32 with polynomial 0x04c11db7\nLeft-shifting CRC-8 with polynomial 0x07\nRight-shifting CRC-8 with polynomial 0x07\nDelay for at least the specified number of nanoseconds.\nSPI transaction operation.\nRead data into the provided buffer.\nA marker interface implemented by all SPI peripherals …\nRead data into the first buffer, while writing data from …\nWrite data out while reading data into the provided buffer.\nWrite data from the provided buffer, discarding read data.\nSPI configuration\nAdd an aditional delay of x in uSeconds after transaction …\n&lt; Amount of SPI bit-cycles the cs should stay active after …\nAdd an aditional Amount of SPI bit-cycles the cs should be …\nOn Half-Duplex transactions: <code>cs_pre_delay_us % 16</code>  …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new instance of SPI controller for all others\nSafety\nSafety\nThis property can be set to configure a SPI Device for …\nSpecifies the order in which the bits of data should be …\nData in “captured” on the first clock transition.\nData in “captured” on the second clock transition.\nSPI Device configuration\nSPI Driver configuration\nSpecify the communication mode with the device\nFull duplex is the default\nHalf duplex in some cases\nUse MOSI (=spid) for both sending and receiving data …\nClock signal high when idle.\nClock signal low when idle.\nLeast significant bit first\nHelper for CPOL = 0, CPHA = 0.\nHelper for CPOL = 0, CPHA = 1.\nHelper for CPOL = 1, CPHA = 0.\nHelper for CPOL = 1, CPHA = 1.\nSPI mode.\nMost significant bit first (default)\nClock phase.\nClock polarity.\nLeast significant bit first, when receiving\nLeast significant bit first, when sending\nAdd an aditional Amount of SPI bit-cycles the cs should be …\n&lt; Amount of SPI bit-cycles the cs should stay active after …\nOn Half-Duplex transactions: <code>cs_pre_delay_us % 16</code>  …\nOn Half-Duplex transactions: <code>cs_pre_delay_us % 16</code>  …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClock phase.\nClock polarity.\nThis property can be set to configure a SPI Device for …\n&lt; For Short Weierstrass: \\p A in the equation. Note that …\n&lt; For Short Weierstrass: \\p B in the equation. For …\n@brief Opaque directory structure\n&lt; Chip did not respond to the command, or timed out.\n&lt; The chip doesn’t have enough space for the current …\n@addtogroup ets_timer_apis @{\n@addtogroup ets_apis @{\n&lt; return failed in ets\n&lt; return successful in ets\nA wrapped <code>esp_err_t</code> to check if an error occurred.\nevent_groups.h\n&lt; The generator of the subgroup used.\n&lt; Initial hash value\n&lt; Initial hash value\n&lt; Precalculated HTable high.\n&lt; Precalculated HTable high.\n&lt; Precalculated HTable low.\n&lt; Precalculated HTable low.\nEnum for the HTTP status codes.\nKey length, in bits (including parity), for DES keys. …\nKey length in bits, including parity, for DES in two-key …\nKey length in bits, including parity, for DES in three-key …\nUndefined key length.\n@brief Type defined for MD5 context\nDefines the memory ranges allocated to the task when an …\nType by which message buffers are referenced.  For …\n&lt; The order of \\p G.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\n&lt; The prime modulus of the base field.\nType by which queues are referenced.  For example, a call …\nType by which queue sets are referenced.  For example, a …\nQueue sets can contain both queues and semaphores, so the …\nType by which ring buffers are referenced. For example, a …\nAllow-split buffers will split an item into two parts if …\nByte buffers store data as a sequence of bytes and do not …\nByte buffers store data as a sequence of bytes and do not …\nNo-split buffers will only store an item in contiguous …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\n@brief Struct that is equivalent in size to the ring buffer…\nType by which stream buffers are referenced.  For example, …\n@brief Task Snapshot structure\nUsed internally only.\nPrototype of local storage pointer deletion callback.\n@cond\n@cond\n@brief IP address\n&lt; The additional data.\n&lt; The additional data.\n&lt; The total length of the additional data.\n&lt; The total length of the additional data.\n&lt; True - Accept incoming NDP, False - Reject it\n&lt; 32-bit acceptance code\n&lt; 32-bit acceptance mask\n&lt; access without context pointer\n&lt; access with context pointer\n&lt; Which action to take by the ETM task module\n&lt; Generator action should perform\n&lt; Generator action should perform\n&lt; Generator action should perform\n&lt; active scan time per channel, units: millisecond.\n&lt; Channel list of ADC1 to be initialized.\n&lt; Channel list of ADC1 to be initialized.\n&lt; ADC1 channel 0 is GPIO0\n&lt; ADC1 channel 1 is GPIO1\n&lt; ADC1 channel 2 is GPIO2\n&lt; ADC1 channel 3 is GPIO3\n&lt; ADC1 channel 4 is GPIO4\n@brief Set the attenuation of a particular channel on …\n@brief Configure ADC1 capture width, meanwhile enable …\n@brief Take an ADC1 reading from a single channel. @note …\n@brief Get the GPIO number of a specific ADC1 channel.\n&lt; Channel list of ADC2 to be initialized.\n&lt; Channel list of ADC2 to be initialized.\n&lt; ADC2 channel 0 is GPIO5\n@brief Configure the ADC2 channel, including setting …\n@brief Take an ADC2 reading on a single channel\n@brief Get the GPIO number of a specific ADC2 channel.\n@brief ADC attenuation parameter. Different parameters …\n&lt;No input attenuation, ADC can measure up to approx.\n&lt;The input voltage of ADC will be attenuated extending the …\n&lt;The input voltage of ADC will be attenuated extending the …\n&lt;The input voltage of ADC will be attenuated extending the …\n@brief ADC resolution setting option. @note  Only used in …\n&lt; ADC capture width is 12Bit.\n&lt; ADC output width is 10Bit\n&lt; ADC output width is 11Bit\n&lt; ADC output width is 12Bit\n&lt; ADC output width is 13Bit\n&lt; ADC output width is 9Bit\n&lt; Default ADC output bits, max supported width will be …\n@brief Check the supported ADC calibration scheme\n@brief Create a Curve Fitting calibration scheme\n@brief Delete the Curve Fitting calibration scheme handle\n@brief ADC calibration handle\n@brief Convert ADC raw data to calibrated voltage\n@brief ADC calibration scheme\n&lt; Curve fitting scheme\n&lt; Line fitting scheme\n@brief ADC channels\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n@brief Prototype of ADC continuous mode event callback\n@brief Get GPIO number from the given ADC channel\n@brief ADC digital controller clock source\n@brief Set ADC continuous mode required configurations\n@brief ADC continuous mode driver configurations\n@brief Deinitialize the ADC continuous driver.\n@brief Group of ADC continuous mode callbacks\n@brief Event data structure @note The <code>conv_frame_buffer</code> is …\n@brief ADC continuous mode driver initial configurations\n@brief Type of adc continuous mode driver handle\n@brief Get ADC channel from the given GPIO number\n@brief Initialize ADC continuous driver and get a handle …\n@brief Read bytes from ADC under continuous mode.\n@brief Register callbacks\n@brief Start the ADC under continuous mode. After this, …\n@brief Stop the ADC. After this, the hardware stops …\n@brief ADC digital controller settings\n@brief Setting the digital controller.\n@brief ADC digital controller (DMA mode) work mode.\n&lt; Use both ADC1 and ADC2 for conversion by turn. e.g. ADC1 …\n&lt; Use Both ADC1 and ADC2 for conversion simultaneously\n&lt; Only use ADC1 for conversion\n&lt; Only use ADC2 for conversion\n@brief Deinitialize the Digital ADC.\n@brief IIR Filter Coefficient\n&lt; The filter coefficient is 16\n&lt; The filter coefficient is 2\n&lt; The filter coefficient is 4\n&lt; The filter coefficient is 64\n&lt; The filter coefficient is 8\n@brief ADC IIR Filter ID\n&lt; Filter 0\n&lt; Filter 1\n@brief ADC DMA driver configuration\n@brief ADC DMA driver configuration\n@brief Initialize the Digital ADC.\n@brief ADC digital controller (DMA mode) output data …\n@brief ADC digital controller (DMA mode) output data …\n&lt; See <code>adc_digi_output_data_t.type1</code>\n&lt; See <code>adc_digi_output_data_t.type2</code>\n@brief ADC digital controller pattern configuration\n@brief Read bytes from Digital ADC through DMA.\n@brief Start the Digital ADC and DMA peripherals. After …\n@brief Stop the Digital ADC and DMA peripherals. After …\n&lt; ADC unit\n@brief ADC channel configurations\n@brief Get GPIO number from the given ADC channel\n@brief ADC digital controller clock source\n@brief Set ADC oneshot mode required configurations\n@brief Delete the ADC unit handle\n@brief Convenience function to get ADC calibrated result\n@brief Get ADC channel from the given GPIO number\n@brief Create a handle to a specific ADC unit\n@brief Get one ADC conversion raw result\n@brief Type of ADC unit handle for oneshot mode\n@brief ADC oneshot driver initial configurations\n&lt; List of configs for each ADC channel that will be used\n&lt; List of configs for each ADC channel that will be used\n&lt; ADC ULP mode is disabled\n&lt; ADC is controlled by ULP FSM\n&lt; ADC is controlled by ULP RISCV\n@brief ADC unit\n&lt; SAR ADC 1\n&lt; SAR ADC 2\n@brief Output ADC1 or ADC2’s reference voltage to …\n&lt; IPv4 address\n&lt; IPv6 address\n&lt; mac address\n&lt; IPv6 address\n&lt; IPv4 address\n&lt; The address to be added to the interface\n&lt; mac address\n&lt; other powerful root address\n&lt; Address data, of which the length is set in the …\n&lt; I2C 10bit address mode enable for slave mode\n&lt; The address family to use when connecting to a host.\n&lt; The address family to use when connecting to a host.\nIndex of changed IPv6 address\nIndex of affected IPv6 address\n&lt; The line width of address phase, e.g. 1-line-addr-phase.\n&lt; Address to perform operation on\n&lt; starting address of the partition in flash\nAffected IPv6 address\n&lt; Broker address configuration\n&lt; Length of address in bits, set to 0 if command does not …\n&lt; Default amount of bits in address phase (0-64), used …\n&lt; The address length in this transaction, in bits.\n@brief Advertise pause function supported by MAC layer\n@brief Advertise pause function supported by MAC layer\n&lt; function used in mesh vendor IE decryption\n&lt; function used in mesh vendor IE encryption\n&lt; station connect function used when decrypt key data\n&lt; station connect function used when send EAPOL frame\n&lt; the aid that soft-AP gives to the station connected to\n&lt; the aid that soft-AP gave to the station disconnects to\n&lt; authentication id assigned by the connected AP\n&lt; authentication id assigned by the connected AP\n&lt; the aid that soft-AP gives to the station connected to\n&lt; the aid that soft-AP gave to the station disconnects to\n&lt; Alarm target count value\n&lt; Timer alarm enable\n&lt; Current alarm value\n&lt; Bit field of alerts to enable (see documentation)\n&lt;  Number of (variable size) blocks allocated in the heap.\nIf format_if_mount_failed is set, and mount fails, format …\nIf format_if_mount_failed is set, and mount fails, format …\n&lt; if this value is set, when “fail” (mesh_attempts_t) …\n&lt; if the BSSID is specified and this value is also set, …\n&lt; Elliptic curves for ECDSA\n&lt; MDs for signatures\n&lt; PK algs for public keys; this applies to all certificates\n&lt; Application protocols required for HTTP2. If HTTP2/ALPN …\n&lt; Application protocols required for HTTP2. If HTTP2/ALPN …\n&lt; NULL-terminated list of supported application protocols …\n&lt; WiFi AMPDU RX feature enable flag\n&lt; WiFi AMPDU TX feature enable flag\n&lt; WiFi AMSDU TX feature enable flag\n&lt; antenna used to receive beacon from AP\n&lt; configuration of AP\n&lt; All AP credentials received from WPS handshake\n&lt; Number of AP credentials received\n&lt; sha256 of elf file\nEvent handler that can be set for the purpose of …\nHandler function for applying the configuration that was …\nHandler function for applying the configuration that was …\n&lt; Number of instances arbitration was lost\n!&lt; Argument to pass to the callback\n&lt; SD/MMC command argument\n&lt; Optional argument passed to function\ndeprecated functions, for back-compatibility only\nother functions\narg_xxx constructor functions\nArray or structure of pointers to arg_xxx structures, may …\n&lt; Size of the <code>tx_channel_array</code>\n&lt; current connections\n&lt; max connections of mesh AP\n&lt; max vote attempts before stopped\n&lt; max vote attempts before a new root is elected …\n&lt; Attenuation of this ADC channel\n&lt; ADC attenuation\n&lt; ADC attenuation\n&lt; ADC attenuation\n&lt; HTTP authorization header\n&lt; Authorization mode of the AP\n&lt; Http authentication type, see <code>esp_http_client_auth_type_t</code>\n&lt; Client authentication\n&lt; authentication mode used by AP\n&lt; authmode of AP\n&lt; The weakest authmode to accept in the fast scan mode …\n&lt; Auth mode of soft-AP. Do not support AUTH_WEP, …\n&lt; authentication mode used by AP\n&lt; Optional X.509 v3 extension authority key identifier.\n&lt; Set to auto clear DMA TX buffer, i2s will always send …\n&lt; Timer auto-reload\n@brief Configure auto negotiation\n@brief Configure auto negotiation\n&lt; Auto-negotiation timeout value (Unit: ms)\n&lt; Internally used members\n&lt; Internally used members\n&lt; Number of backlog connections\n&lt; Number of backlog connections\n&lt; base config\n&lt; base config\n&lt; Transaction data, so that pointer to spi_transaction_t …\n&lt; File path prefix associated with the filesystem.\n!&lt; Comunication baud rate\n&lt; UART baud rate\n&lt; BCK pin, input in slave role, output in master role\n&lt; BCK pin, input in slave role, output in master role\n&lt; BCK pin, input in slave role, output in master role\n&lt; The division from mclk to bclk, only take effect for …\n&lt; Beacon interval which should be multiples of 100. Unit: …\n&lt; WiFi softAP maximum length of the beacon\n&lt; Set to enable big endian\n&lt; Set to enable big endian\n&lt; Set to enable big endian\n&lt; Set true to enable big endian\n&lt; How to represent BIT0 in RMT symbol\n&lt; How to represent BIT1 in RMT symbol\n&lt; Length of bit field [1..-]\n&lt; Set to enable lsb first\n&lt; Set true to enable lsb first\n&lt; Set to enable msb order\n&lt; Set to enable msb order\n&lt; Set to enable bit shift in Philips mode\n&lt; Set true to enable bit shift in Philips mode\n&lt; The curve size in bits.\n&lt; Start bit [0..255]\n&lt; ADC output bit width\n&lt; ADC bit width\n&lt; I2S total bits in one channel， only take effect when …\n&lt; I2S total bits in one channel， only take effect when …\n&lt; Color depth, in bpp\n&lt; I2S sample bits in one channel\n&lt; I2S sample bits in one channel\n&lt; ADC raw output bitwidth\n&lt; ADC conversion result bits\n&lt; block length\n@brief Check if the image (bootloader and application) has …\n@brief Check if a GPIO input is held low for a long …\n@brief Check if a GPIO input is held low or high for a …\n@brief Erase the partition data that is specified in the …\n@brief Returns the number of active otadata.\n@brief Get chip package\n@brief Calculates a sha-256 for a given partition or …\n@brief Determines if the list contains the label\n@brief Calculate crc for the OTA data select.\n@brief Returns true if OTADATA is not marked as bootable …\n@brief Verifies the validity of the OTA data select\n@brief Returns the number of active otadata.\n@brief Configure VDDSDIO, call this API to rise VDDSDIO to …\n@brief Configure default SPI pin modes and drive strengths\n@brief Fill buffer with ‘length’ random bytes\n@brief Verify and load an app image (available only in …\n@brief Load an app image without verification (available …\n@brief Disable entropy source for RNG\n@brief Enable an entropy source for RNG if RF subsystem is …\n&lt; Brake mode\n&lt; Brake mode\n&lt; LwIP bridge configuration\n&lt; LwIP bridge configuration\nLwIP bridge configuration\nLwIP bridge configuration\n&lt; broadcast and multicast queue\n&lt; Broker address and security verification\n&lt; Baudrate prescale (i.e., clock divider). Any even number …\n&lt; BSSID of disconnected AP\n&lt; BSSID of connected AP\n&lt; MAC address of AP\n&lt; MAC address of AP\n&lt; MAC address of target AP\n&lt; BSSID of connected AP\n&lt; BSSID of disconnected AP\n&lt; MAC address of target AP.\n&lt; BSSID, if this value is specified, users should also …\n&lt; BSSID of the AP to which connection was estalished\n&lt; BSSID of the AP\n&lt; in M-BSSID set, identifies the nontransmitted BSSID\n&lt; whether set MAC address of target AP or not. Generally, …\n&lt; whether set MAC address of target AP or not.\nenum btm_query_reason: Reason code for sending btm query\n&lt; Buffer containing the given ASN.1 item.\n&lt; buffer of CSI data\n&lt; Buffer containing the given ASN.1 item.\n&lt; data block being processed\n&lt; data block being processed\n&lt; Buffer size configuration.\n&lt; HTTP receive buffer size\n&lt; HTTP transmit buffer size\n&lt; Requested time period between consecutive FTM bursts in …\n&lt; Number of instances a bus error has occurred\n&lt; Bus off indicator GPIO number (optional, set to -1 if …\nLocal modes\nOutput modes\nControl characters\nControl modes\nInput modes\ninput baud rate\n&lt; Certificate Authority’s certificate in a buffer. …\n&lt; Size of Certificate Authority certificate pointed to by …\n&lt; CA certificate buffer legacy name\n&lt; Size of Certificate Authority certificate legacy name\n&lt; WiFi TX cache buffer number\n!&lt; Function to call when timer expires\n&lt; Capture edge\n&lt;Select internal reference capacitance of denoise channel. …\n&lt;Select internal reference capacitance of denoise channel. …\n&lt; Captured value\n&lt; Deprecated variable. Device will always connect in PMF …\n&lt; the number of devices in current network\n&lt; total number of sectors\n&lt; Card Command Class for SD\n&lt; RMT carrier duty (%)\n&lt; RMT carrier duty (%)\n&lt; RMT carrier enable\n&lt; RMT carrier frequency\n&lt; RMT carrier frequency\n&lt; Level of the RMT output, when the carrier is applied\n&lt; The level to remove the carrier\n@brief arguments for callback functions\n&lt; country code string\nRestart output.\n&lt; IP address of cellphone.\n&lt; Length of the buffer pointed to by cert_pem. May be 0 …\n&lt; SSL server certification, PEM format as string, if the …\n&lt; Certificate data, default is NULL, not required to …\n&lt; Certificate for ssl mutual authentication, not required …\n&lt; Length of the buffer pointed to by certificate.\n&lt; Length of the buffer pointed to by certificate.\n&lt; Optional list of certificate policies (Only anyPolicy is …\n@brief Extracts the input baud rate from the input …\n@brief Extracts the output baud rate from the input …\n@brief Set input baud rate in the termios structure\n@brief Set output baud rate in the termios structure\n&lt; ADC channel, for chips with …\n&lt; I2S active channel bit mask, set value in <code>i2s_channel_t</code> …\n&lt; I2S active channel bit mask, set value in <code>i2s_channel_t</code> …\n&lt; Wi-Fi channel that peer uses to send/receive ESPNOW …\n&lt; channel of connected AP\n!&lt; UART channel number (count from zero)\n&lt; ADC channel\n&lt; channel, scan the specific channel\n&lt; Channel of soft-AP\n&lt; channel of target AP. Set to 1~13 to scan starting from …\n&lt; Primary channel of the FTM Responder\n&lt; channel of connected AP\n&lt; Wi-Fi channel that peer uses to send/receive ESPNOW …\n&lt; new channel\n&lt; channel number of the new found network\n&lt; channel, the mesh network on\n&lt; Channel of the AP\n&lt; Channel of the AP\n&lt; LEDC channel (0 - LEDC_CHANNEL_MAX-1)\n&lt; LEDC channel (0 - LEDC_CHANNEL_MAX-1)\n&lt; RMT channel\n&lt; Sigma-delta channel number\n&lt; enable to turn on channel filter to smooth adjacent …\n&lt; I2S channel format.\n&lt; I2S channel format.\n&lt; channel switch\n&lt; AT cmd char repeat number\nConvert <code>error</code> into a <code>Result</code> with <code>Ok(value)</code> if no error …\n@brief Period time of checking Ethernet link status\nSuspend check erase/program operation, reserved for …\nSuspend check erase/program operation, reserved for …\nYield to other tasks. Called during erase operations. …\n&lt; child address\n&lt; child info\n&lt; child connected\n&lt; child disconnected\n&lt; Pointer to chip-model-specific “adapter” structure. …\n&lt; Detected chip id.\n&lt; Chip identification number\n&lt; decoded CID (Card IDentification) register value\nFunction for deallocating security infrastructure\nFunction for deallocating security infrastructure\n&lt; esp_http_client_handle_t context\n&lt; Client handle\n&lt; Client handle\n&lt; esp_http_client_handle_t context\n&lt; Client handle\n&lt; Client handle\n&lt; <em>MQTT</em> client handle for this event\n&lt; Length of the buffer pointed to by client_cert_pem. May …\n&lt; SSL client certification, PEM format as string, if the …\n&lt; Set <em>MQTT</em> client identifier. Ignored if …\n&lt; Length of the buffer pointed to by client_key_pem. May …\n&lt; Client key decryption password string\n&lt; String length of the password pointed to by …\n&lt; SSL client key, PEM format as string, if the server …\n&lt; Client certificate in a buffer Format may be PEM or DER, …\n&lt; Size of client certificate pointed to by …\n&lt; Client certificate legacy name\n&lt; Size of client certificate legacy name\n&lt; Client key in a buffer Format may be PEM or DER, …\n&lt; Size of client key pointed to by clientkey_pem_buf …\n&lt; Client key decryption password string\n&lt; Client key decryption password string\n&lt; String length of the password pointed to by …\n&lt; String length of the password pointed to by …\n&lt; Client key legacy name\n&lt; Size of client key legacy name\n&lt; PDM clk pin, output\n&lt; Configure LEDC source clock from ledc_clk_cfg_t. Note …\n&lt; PDM TX clock configurations, can be generated by macro …\n&lt; Standard mode clock configuration, can be generated by …\n&lt; TDM mode clock configuration, can be generated by macro …\n&lt; RMT channel counter divider\n&lt; Bitwise of <code>I2C_SCLK_SRC_FLAG_**FOR_DFS**</code> for clk source …\n&lt; I2C clock frequency for master mode, (no higher than …\n&lt; Clock source\n&lt; Clock source, set to 0 or TWAI_CLK_SRC_DEFAULT if you …\n&lt; GPTimer clock source\n&lt; Choose clock source\n&lt; Choose clock source\n&lt; Choose clock source\n&lt; MCPWM timer clock source\n&lt; MCPWM carrier clock source\n&lt; MCPWM capture timer clock source\n&lt; Clock source of RMT TX channel, channels in the same …\n&lt; Clock source of RMT RX channel, channels in the same …\n&lt; Selects source clock.\n&lt; the clock source of the temperature sensor.\n&lt; I2C core clock devider\n&lt; CLKOUT divider. Can be 1 or any even number from 2 to 14 …\n&lt; CLKOUT GPIO number (optional, set to -1 if unused)\n&lt; RMII Clock GPIO Configuration\n&lt; RMII Clock Mode Configuration\n&lt; Select SPI clock source, <code>SPI_CLK_SRC_DEFAULT</code> by default.\n&lt; Clock speed, divisors of the SPI <code>clock_source</code>, in Hz\n&lt; close without context pointer\nCustom session closing callback.\nCustom session closing callback.\n&lt; close with context pointer\nCloses a secure transport session with specified ID\nCloses a secure transport session with specified ID\n&lt; closedir without context pointer\n&lt; closedir with context pointer\n&lt; Command data, of which the length is set in the …\n&lt; UART AT cmd char\n&lt; The line width of command phase, e.g. 2-line-cmd-phase.\nGet the wrapped <code>esp_err_t</code>.\n&lt; Gradient of ADC-Voltage curve\n&lt; Offset of ADC-Voltage curve\n&lt; @deprecated Set RGB color space, please use …\nCommand name. Must not be NULL, must not contain spaces. …\n&lt; Command to send\n&lt; Default amount of bits in command phase (0-16), used …\n&lt; The command length in this transaction, in bits.\n&lt; timeout, in milliseconds, of a single command. Set to 0 …\nSend an user-defined spi transaction to the device.\nSend an user-defined spi transaction to the device.\n&lt; If non-NULL, server certificate CN must match this name. …\n&lt; If non-NULL, server certificate CN must match this name. …\n&lt; Pointer to the string containing server certificate …\n&lt; Pointer to the string containing server certificate …\n&lt; I2S communication format\n&lt; I2S communication format\n&lt; Comparator handle\n&lt; Compare value\n&lt; vote address configuration\nHTTP Server Configuration, if a server is not already …\nConfigure the host to work at different read mode. …\nConfigure the host to work at different read mode. …\n&lt; NDP Confirm frame required\nConnection information (valid only when <code>wifi_state</code> is …\n&lt; connection refused error code reported from MQTT* broker …\n&lt; connection refused error code reported from MQTT* broker …\n&lt; parent information, same as Wi-Fi event …\n&lt; parent connected\n&lt; Length of the request body\n&lt; Length of the request body\n&lt; Context to identify the request\n&lt; Context to identify the request\n&lt; I2C LCD panel will encode control information (e.g. D/C …\n&lt; Pointer to conversion result buffer for one conversion …\n&lt; Conversion frame size, in bytes. This should be in …\n&lt; Suggest leaving it empty, this parameter has been …\n&lt; suggest leaving it empty, this parameter has been …\n&lt; ADC DMA conversion mode, see <code>adc_digi_convert_mode_t</code>.\n&lt; ADC DMA conversion mode, see <code>adc_digi_convert_mode_t</code>.\n&lt; Bytes of data that can be converted in 1 interrupt. This …\n&lt; Bytes of data that can be converted in 1 interrupt. This …\nConvert <code>error</code> into a <code>Result</code> with <code>Ok(())</code> if not error …\n&lt; The core the HTTP server task will run on\n&lt; The core the HTTP server task will run on\n&lt; A “ping” session contains count procedures\n&lt; Count mode\n&lt; Current count value\n&lt; MCPWM timer count value\n&lt; The count value that should lock to upon sync event\n&lt; The count value that should lock to upon sync event\n&lt; Counter direction\n&lt; Counter enable\n&lt; country information of AP\n&lt; Check sum crc32\n&lt; User credentials for broker\n&lt; Function pointer to esp_crt_bundle_attach. Enables the …\n&lt; Pointer to ESP x509 Certificate Bundle attach function …\n&lt; The AES context to use for AES block encryption or …\n&lt; crypto functions\n&lt; Amount of SPI bit-cycles the cs should stay active after …\n&lt; Amount of SPI bit-cycles the cs should be activated …\n&lt; GPIO used for CS line\n&lt; decoded CSD (Card-Specific Data) register value\n&lt; CSD structure format\n&lt; WiFi channel state information enable flag\nUDP Port number for asynchronously exchanging control …\nUDP Port number for asynchronously exchanging control …\nContext pointer to be passed to above handler functions …\nContext pointer to be passed to above handler functions …\n&lt; Actual offset for the data associated with this event\nThe interface that received the packet for the current …\nHeader of the input packet currently being processed.\nHeader of the input IPv6 packet currently being processed.\nTotal header length of current_ip4/6_header (i.e. after …\nDestination IP address of current_header\nSource IP address of current_header\nThe interface that accepted the packet for the current …\nThis function is called when pbuf_free deallocates this …\n@brief Custom IO function of MAC driver. This function is …\n@brief Custom IO function of PHY driver. This function is …\n@brief Custom IO function of MAC driver. This function is …\n@brief Custom IO function of PHY driver. This function is …\n&lt; file number\n&lt; zero-terminated file name\n&lt; not defined in POSIX, but present in BSD and Linux\n&lt; Destination MAC address\n&lt; data of the event\nPointer to buffer containing the proof of possession data\nPointer to buffer containing the proof of possession data\n&lt; Appended Data payload\n&lt; Configuration of ioctl command\n&lt; data\n&lt; response data\n&lt; buffer to send or read into\n&lt; data of the event\nPUBLIC\n&lt; Data associated with this event\nPointer to buffer containing the proof of possession data\nProtocomm HTTPD Configuration Data\n&lt; Data bytes (not relevant in RTR frame)\n&lt; The pointer of DMA buffer that just finished sending or …\n&lt; GPIO pin for spi data0 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data1 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data2 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data3 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data4 signal in octal mode, or -1 if …\n&lt; GPIO pin for spi data5 signal in octal mode, or -1 if …\n&lt; GPIO pin for spi data6 signal in octal mode, or -1 if …\n&lt; GPIO pin for spi data7 signal in octal mode, or -1 if …\n&lt; I2S sample data bit width (valid data bits per sample), …\n&lt; I2S sample data bit width (valid data bits per sample)\n&lt; I2S sample data bit width (valid data bits per sample)\n&lt; UART byte size\n&lt; Set the data endian for color data larger than 1 byte\n&lt; DATA pin, input\n&lt; data length of data\n&lt; Length of the appended Data\n&lt; Length of data\n&lt; data length of data\n&lt; Data length\n&lt; Length of the data for this event\n&lt; Data length code\n&lt; The line width of data phase, e.g. 4-line-data-phase.\n&lt; DATA pin, output\n&lt; Total data processed\n&lt; Total data processed\n&lt; Size of the data next to ICMP packet header\n&lt; length of data buffer\n&lt; manufacturing date\n&lt; Compile date\n&lt; Date.\n&lt; Offset of the D/C selection bit in control phase\n&lt; GPIO used to select the D/C line, set this to -1 if the …\n&lt; field reserved for future extension\n&lt; VFS index, not to be used by applications\n&lt;Set debounce count, such as <code>n</code>. If the measured values …\n&lt;Set debounce count, such as <code>n</code>. If the measured values …\nFunction which implements the decryption algorithm\nFunction which implements the decryption algorithm\n@brief Deinitialize Ethernet MAC\n@brief Deinitialize Ethernet PHY\n@brief Deinitialize Ethernet MAC\n@brief Deinitialize Ethernet PHY\n&lt; host function to deinitialize the driver\n&lt; host function to deinitialize the driver, called with …\n@brief Delete console REPL environment @param[in] repl …\n@brief Free memory of Ethernet MAC\n@brief Free memory of Ethernet PHY instance\n@brief Delete console REPL environment @param[in] repl …\n@brief Free memory of Ethernet MAC\n@brief Free memory of Ethernet PHY instance\n@brief Delete encoder object\n@brief Destory LCD panel\n@brief Destory LCD panel IO handle (deinitialize all and …\nDelay for at least ‘us’ microseconds. Called in …\nFunction which is to be called by the manager to delete a …\nFunction which is to be called by the manager to delete a …\n&lt; Delta early time for RF PHY on\n&lt; Delta timeout time for RF PHY off\n&lt; Destination address of ESPNOW packet\n&lt; Destination address of ESPNOW packet\n&lt; Destination MAC address\n&lt; I2C device address\nConfigure the device-related register before transactions. …\nConfigure the device-related register before transactions. …\nBLE device name being broadcast at the time of provisioning\n&lt; Device name. If empty, the default device name is used.\nBLE device name being broadcast at the time of provisioning\n&lt; DATA pin, input\n&lt; DATA pin, input\n&lt; I2S channel direction\n&lt; Count direction\n&lt; MCPWM timer count direction\n&lt; Count direction\n&lt; The count direction that should lock to upon sync event\n&lt; Timer direction\n&lt; Timer direction\n&lt; Timer direction\n&lt; The count direction that should lock to upon sync event\n@brief Directory entry structure\n&lt; Client will reconnect to server (when …\n&lt; Disable HTTP automatic redirects\n&lt; <em>MQTT</em> clean session, default clean_session is true\n&lt; Set <code>disable_keepalive=true</code> to turn off keep-alive …\n&lt; parent disconnected\nEnables real ff_disk_status function implementation for SD …\nEnables real ff_disk_status function implementation for SD …\n@brief Turn on or off the display\n!&lt; Call the callback from task or from ISR\n&lt; Estimated one-way distance in Centi-Meters\n&lt; Counter clock divider\n&lt; Dialog Token of the FTM frame\n&lt; This is an alias to ‘dma_desc_num’ for backward …\n&lt; This is an alias to ‘dma_frame_num’ for backward …\n&lt; The total number of descriptors used by I2S DMA to …\n&lt; I2S DMA buffer number, it is also the number of DMA …\n&lt; Frame number for one-time sampling. Frame here means the …\n&lt; I2S frame number in one DMA buffer. One frame means …\n&lt; destination MAC address of the CSI data\n&lt; host function to do a transaction\n&lt; DATA pin, output\n&lt; DATA pin, output\n&lt; DATA pin, output\n&lt; The second data pin for the DAC dual-line mode, only …\n@brief Draw bitmap on LCD panel\n&lt; driver config\n&lt; Pointer to the implementation function table\n&lt; driver config\n&lt; free rx buffer function pointer\n&lt; free rx buffer function pointer\n&lt; Pointer for digital signature peripheral context\n&lt; Pointer for digital signature peripheral context\n&lt; Pointer for digital signature peripheral context, see …\n&lt; Carrier of handle for digital signature parameters, …\n&lt; Basic dummy bits to use\n&lt; Amount of dummy bits to insert between address and data …\n&lt; The dummy length in this transaction, in bits.\n&lt; dup flag of the message associated with this event\n&lt; parent duty\n&lt; parent or child duty\n&lt; LEDC channel duty, the range of duty setting is [0, (2**…\n&lt; LEDC current duty of the channel, the range of duty is […\n&lt; Carrier duty cycle\n&lt; Carrier wave duty cycle (0~100%)\n&lt; Duty cycle of positive clock, in 1/256th increments (128 …\n&lt; LEDC channel duty resolution\n&lt; WiFi dynamic RX buffer number\n&lt; WiFi dynamic TX buffer number\nPossible return values for eTaskConfirmSleepModeStatus().\n@cond !DOC_EXCLUDE_HEADER_SECTION task. h @code{c} …\nTask states returned by eTaskGetState.\n&lt; Which kind of edge can trigger the ETM event module\n&lt; element ID\n&lt;  XTS encryption and decryption key\n&lt; Should be set to WIFI_VENDOR_IE_ELEMENT_ID (0xDD)\n@brief RMII Clock GPIO number Options\n@brief Output RMII Clock from internal APLL Clock …\n@brief MAC will get RMII clock from outside at this GPIO.\n@brief Inverted Output RMII Clock from internal APLL Clock …\n@brief Output RMII Clock from internal APLL Clock …\n@brief RMII Clock Mode Options\n@brief Default values configured using Kconfig are going …\n@brief Input RMII Clock from external. EMAC Clock GPIO …\n@brief Output RMII Clock from internal APLL Clock. EMAC …\n&lt;enable proximity function for sleep pad\n&lt; Enable or disable beacon monitor\n&lt; Indicate whether STA’s HT2040 coexist management is …\n@brief Enable flow control on MAC layer or not\n@brief Enable flow control on MAC layer or not\n&lt; Enable smartconfig logs.\n&lt; bool to enable/disable linger\n&lt; bool to enable/disable linger\n@brief Encode the user data into RMT symbols and write …\n&lt; ESPNOW data that this peer sends/receives is encrypted …\nFunction which implements the encryption algorithm\n&lt; ESPNOW data that this peer sends/receives is encrypted …\nFunction which implements the encryption algorithm\n&lt; Number of encrypted ESPNOW peers, maximum value is …\n&lt; Number of encrypted ESPNOW peers, maximum value is …\n&lt; flag is set to true if partition is encrypted\nCalled after completing any flash operation.\nget_socket_select_semaphore returns semaphore allocated in …\n&lt; The CRL entries containing the certificate revocation …\n&lt; Entry address\nDirect access to the list of CRL entry extensions (an …\nErase a specific block by its start address.\nErase a specific block by its start address.\nErase whole flash chip.\nErase whole flash chip.\n&lt; data state on card after erase whether 0 or 1 (card …\nErase a specific sector by its start address.\nErase a specific sector by its start address.\n&lt; size the erase operation should be aligned to\nDefinitions for error constants.\nConnection aborted.\nAlready connecting.\nIllegal argument.\nBuffer error.\nConnection closed.\nNot connected.\nLow-level netif error\nOperation in progress\nConn already established.\nOut of memory error.\nNo error, everything OK.\nConnection reset.\nRouting problem.\nTimeout.\nAddress in use.\nIllegal value.\nOperation would block.\n&lt; error returned from transfer\n&lt; esp-mqtt error handle including esp-tls errors as well …\n&lt; error type referring to the source of the error\n&lt; error type referring to the source of the error\n&lt; ESPNOW using ersu send frame\n&lt; ESPNOW using ersu send frame\nConvert an <code>esp_err_t</code> into a <code>Result&lt;(), EspError&gt;</code>.\n@brief Structure storing characteristics of an ADC\n@brief Characterize an ADC at a particular attenuation\n@brief Checks if ADC calibration values are burned into …\n@brief   Reads an ADC and converts the reading to a …\n@brief   Convert an ADC reading to voltage in mV\n@brief Type of calibration value used in characterization\n&lt; Characterization based on default reference voltage\n&lt; Characterization based on Two Point values stored in …\n&lt; Characterization based on Two Point values and fitting …\n&lt; Characterization based on reference voltage stored in …\n@brief The AES callback function when do WPS connect.\n@brief The AES callback function when do WPS connect.\n\\brief Lock access to AES hardware unit\n\\brief          AES context structure\n\\brief          AES-CBC buffer encryption/decryption …\n\\brief          AES-CFB128 buffer encryption/decryption.\n\\brief          AES-CFB8 buffer encryption/decryption.\n\\brief               AES-CTR buffer encryption/decryption\n\\brief          AES-ECB block encryption/decryption\n\\brief       This function performs an AES-OFB (Output …\nAES-XTS buffer encryption/decryption\nDeprecated, see esp_aes_internal_decrypt\n@brief Deinitialize AES decryption\n@brief Initialize AES for decryption\n@brief Decrypt one AES block\nDeprecated, see esp_aes_internal_encrypt\n@brief Deinitialize AES encryption\n@brief Initialize AES for encryption\n@brief Encrypt one AES block\n\\brief          Clear AES context\n\\brief           This function performs a GCM …\n\\brief           This function performs GCM encryption or …\n\\brief           This function finishes the GCM operation …\n\\brief           This function clears a GCM context\n\\brief           This function initializes the specified …\n\\brief           This function associates a GCM context …\n\\brief           This function starts a GCM encryption or …\n\\brief           This function feeds an input buffer into …\n\\brief           This function feeds an input buffer as …\n@brief One-Key GMAC hash with AES for MIC computation\n\\brief          Initialize AES context\n\\brief Unlock access to AES hardware unit\n\\brief          AES set key schedule (encryption or …\n@brief The AES callback function when do STA connect.\n@brief The AES callback function when do STA connect.\n\\brief The AES XTS context-type definition.\n\\brief          This function releases and clears the …\n\\brief          This function initializes the specified …\n\\brief          This function prepares an XTS context for …\n\\brief          This function prepares an XTS context for …\n@brief callback called when an allocation operation fails, …\n@brief Description about application.\n@brief   Return esp_app_desc structure. This structure …\n@brief   Fill the provided buffer with SHA256 of the ELF …\nGet the next frame on a stack for backtracing\nGet the first frame of the current stack’s backtrace\n@brief Print the backtrace of the current stack\n@brief Print the backtrace from specified frame.\n@brief  Return base MAC address which is set using …\n@brief  Set base MAC address with the MAC address which is …\n@brief Decrypt data using CCMP (Counter Mode CBC-MAC …\n@brief Encrypt data using CCMP (Counter Mode CBC-MAC …\n@brief ESP chip ID\n&lt; chip ID: ESP32\n&lt; chip ID: ESP32-C2\n&lt; chip ID: ESP32-C3\n&lt; chip ID: ESP32-C6\n&lt; chip ID: ESP32-H2\n&lt; chip ID: ESP32-S2\n&lt; chip ID: ESP32-S3\n&lt; Invalid chip ID (we defined it to make sure the …\n&lt; The long hold GPIO\n&lt; If the GPIO input is not low\n&lt; The short hold GPIO\n@brief Console command main function @param argc number of …\n@brief Register console command @param cmd pointer to the …\n@brief Console command description\n@brief Parameters for console initialization\n@brief de-initialize console module @note  Call this once …\n@brief Parameters for console device: UART\n@brief Callback which provides command completion for …\n@brief Callback which provides command hints for linenoise …\n@brief initialize console module @param config console …\n@brief Establish a console REPL environment over UART …\n@brief Register a ‘help’ command\n@brief Parameters for console REPL (Read Eval Print Loop)\n@brief Console REPL base structure\n@brief Type defined for console REPL\n@brief Run command line @param cmdline command line …\n@brief Split command line into arguments in place @verbatim\n@brief Start REPL environment @param[in] repl REPL handle …\n@brief  Check integrity of coredump data in flash. This …\n@brief  Erases coredump data in flash. …\n@brief  Retrieves address and size of coredump data in …\n@brief  Initializes core dump module internal data.\n@brief  Saves core dump to flash.\n@brief  Print base64-encoded core dump to UART.\n@brief Clear a hardware breakpoint on the current CPU\n@brief Clear a hardware watchpoint on the current CPU\n@brief Atomic compare-and-set operation\n@brief Configure the CPU to disable access to invalid …\n@brief CPU cycle count type\n@brief CPU interrupt descriptor\n@brief Get a CPU interrupt’s descriptor\n@brief CPU interrupt handler type\n@brief CPU interrupt type\n@brief Reset a CPU core\n@brief Set and enable a hardware breakpoint on the current …\n@brief Set and enable a hardware watchpoint on the current …\n@brief Stall a CPU core\n@brief Resume a previously stalled CPU core\n@brief Wait for Interrupt\n@brief CPU watchpoint trigger type\n@brief CRC32 value in little endian.\n@brief      Attach and enable use of a bundle for …\n@brief      Disable and dealloc the certification bundle\n@brief      Set the default certificate bundle used for …\n@brief Enter deep-sleep mode\n@brief Unregister an deepsleep callback\n@brief Disable logging from the ROM code after deep sleep.\n@brief Enable wakeup using specific gpio pins\n@brief Register a callback to be called from the deep …\n@brief Enter deep sleep with the configured wakeup options\n@brief Enter deep-sleep mode\n@brief Enter deep sleep with the configured wakeup options\n@brief Function type for stub to run on wake from sleep.\n@brief The default esp-idf-provided esp_wake_deep_sleep() …\n@brief  Unregister an idle callback. If the idle callback …\n@brief  Unregister an idle callback from the idle hook of …\n@brief  Unregister a tick callback. If the tick callback …\n@brief  Unregister a tick callback from the tick hook of …\n@brief Derive local MAC address from universal MAC address.\n@brief Clear the previously set Certificate Authority (CA) …\n@brief Clear the previously set client certificate and …\n@brief Clear the previously set identity for PEAP/TTLS …\n@brief Clear new password for MSCHAPv2 method.\n@brief Clear password for PEAP/TTLS method.\n@brief Clear username for PEAP/TTLS method.\n@brief Get EAP client certificates time check status.\n@brief Set CA certificate for EAP authentication.\n@brief Set client certificate and private key for EAP …\n@brief Set EAP client certificates time check (disable or …\n@brief Set the parameters for EAP-FAST Phase 1 …\n@brief Set identity for PEAP/TTLS authentication method.\n@brief Set a new password for MSCHAPv2 authentication …\n@brief Set the PAC (Protected Access Credential) file for …\n@brief Set password for PEAP/TTLS authentication method.\n@brief Enable or disable Suite-B 192-bit certification …\n@brief Set EAP-TTLS phase 2 method.\n@brief Set username for PEAP/TTLS authentication method.\n@brief Use the default certificate bundle for EAP …\n@brief Configuration settings for EAP-FAST (Extensible …\n@brief Enumeration of phase 2 authentication types for …\n&lt; CHAP (Challenge Handshake Authentication Protocol)\n&lt; EAP (Extensible Authentication Protocol)\n&lt; MS-CHAP (Microsoft Challenge Handshake Authentication …\n&lt; MS-CHAPv2 (Microsoft Challenge Handshake Authentication …\n&lt; PAP (Password Authentication Protocol)\n@brief Set the batch mode of writing fields.\n@brief Reset the batch mode of writing fields.\n@brief Writes all prepared data for the batch mode.\n@brief Checks that the given block is empty.\n@brief Type of eFuse blocks ESP32C3\n&lt; Number of eFuse BLOCK0. REPEAT_DATA\n&lt; Number of eFuse BLOCK1. MAC_SPI_8M_SYS\n&lt; Number of eFuse BLOCK10. SYS_DATA_PART2\n&lt; Number of eFuse BLOCK2. SYS_DATA_PART1\n&lt; Number of eFuse BLOCK3. USER_DATA\n&lt; Number of eFuse BLOCK4. KEY0\n&lt; Number of eFuse BLOCK5. KEY1\n&lt; Number of eFuse BLOCK6. KEY2\n&lt; Number of eFuse BLOCK7. KEY3\n&lt; Number of eFuse BLOCK8. KEY4\n&lt; Number of eFuse BLOCK9. KEY5\n&lt; Number of eFuse BLOCK4. KEY0\n&lt; Number of eFuse BLOCK5. KEY1\n&lt; Number of eFuse BLOCK6. KEY2\n&lt; Number of eFuse BLOCK7. KEY3\n&lt; Number of eFuse BLOCK8. KEY4\n&lt; Number of eFuse BLOCK9. KEY5\n&lt; Number of eFuse BLOCK2. SYS_DATA_PART1\n&lt; Number of eFuse BLOCK10. SYS_DATA_PART2\n&lt; Number of eFuse BLOCK3. USER_DATA\n@brief   Checks eFuse errors in BLOCK0.\n@brief Check secure_version from app and secure_version …\n@brief Type of coding scheme\n&lt; None\n&lt; Reed-Solomon coding\n@brief Return the number of unused efuse key blocks in the …\n@brief Type definition for an eFuse field\n@brief Disable ROM Download Mode via eFuse\n@brief Switch ROM Download Mode to Secure Download mode …\n@brief Find a key block with the particular purpose set.\n@brief Search for an unused key block and return the first …\n@brief   Return efuse coding scheme for blocks.\n@brief Returns the status of the Secure Boot public key …\n@brief   Returns the number of bits used by field.\n@brief Returns a pointer to a key block.\n@brief Returns a read protection for the key block.\n@brief Returns a write protection for the key block.\n@brief Returns the current purpose set for an efuse key …\n@brief Returns a write protection of the key purpose field …\n@brief   Returns chip package from efuse\n@brief Returns a pointer to a key purpose for an efuse key …\n@brief Returns a write protection of the Secure Boot …\n@brief Returns true if the key block is unused, false …\n@brief  Return base MAC address which was previously …\n@brief  Return base MAC address which is …\n@brief Type of key purpose\n&lt; HMAC Downstream mode\n&lt; Digital Signature peripheral key (uses HMAC Downstream …\n&lt; JTAG soft enable key (uses HMAC Downstream mode)\n&lt; HMAC Upstream mode\n&lt; MAX PURPOSE\n&lt; Reserved\n&lt; SECURE_BOOT_DIGEST0 (Secure Boot key digest)\n&lt; SECURE_BOOT_DIGEST1 (Secure Boot key digest)\n&lt; SECURE_BOOT_DIGEST2 (Secure Boot key digest)\n&lt; User purposes (software-only use)\n&lt; XTS_AES_128_KEY (flash/PSRAM encryption)\n@brief   Read key to efuse block starting at the offset …\n@brief Read a single bit eFuse field as a boolean value.\n@brief   Reads bits from EFUSE field and writes it into an …\n@brief   Reads bits from EFUSE field and returns number of …\n@brief   Returns value of efuse register.\n@brief Return secure_version from efuse field. @return …\n@brief Reset efuse write registers\n@brief Type definition for ROM log scheme\n&lt; Disable ROM logging permanently\n&lt; Always enable ROM logging\n&lt; ROM logging is enabled when specific GPIO level is high …\n&lt; ROM logging is enabled when specific GPIO level is low …\n@brief Sets the Secure Boot public key digest revocation …\n@brief Sets a read protection for the key block.\n@brief Sets a write protection for the key block.\n@brief Sets a key purpose for an efuse key block.\n@brief Sets a write protection of the key purpose field …\n@brief   Sets a read protection for the whole block.\n@brief Set boot ROM log scheme via eFuse\n@brief   Sets a write protection for the whole block.\n@brief Sets a write protection of the Secure Boot public …\n@brief Write efuse field by secure_version value.\n@brief   Write key to efuse block starting at the offset …\n@brief Write a single bit eFuse field to 1\n@brief   Writes array to EFUSE field.\n@brief   Writes a required count of bits as “1” to …\n@brief Program a block of key data to an efuse block\n@brief Program keys to unused efuse blocks\n@brief   Write value to efuse register.\n@brief Returns string for esp_err_t error codes\n@brief Returns string for esp_err_t and system error codes\n@brief     Set timeout of SmartConfig process.\n@brief Configuration of Ethernet driver\n@brief Decrease Ethernet driver reference\n@brief Delete netif glue of Ethernet driver\n@brief Install Ethernet driver\n@brief Uninstall Ethernet driver @note It’s not …\n@brief Handle of Ethernet driver\n@brief Increase Ethernet driver reference @note Ethernet …\n@brief Command list for ioctl API\n&lt; Get PHY Auto Negotiation\n&lt; Get Duplex mode\n&lt; Get MAC address\n&lt; Get PHY address\n&lt; Get Speed\n&lt; Set PHY Auto Negotiation\n&lt; Set Duplex mode\n&lt; Set flow control\n&lt; Set MAC address\n&lt; Set PHY address\n&lt; Set PHY loopback\n&lt; Set promiscuous mode\n&lt; Set Speed\n@brief Misc IO function of Etherent driver\n@brief Ethernet MAC\n@brief Ethernet MAC\n@brief Ethernet mediator\n@brief Ethernet mediator\n@brief Handle of netif glue - an intermediate layer …\n@brief Create a netif glue for Ethernet driver @note netif …\n@brief Create a PHY instance of DP83848\n@brief Create a PHY instance of IP101\n@brief Create a PHY instance of KSZ80xx\n@brief Create a PHY instance of LAN87xx\n@brief Create a PHY instance of RTL8201\n@brief Ethernet PHY\n@brief Ethernet PHY\n@brief Start Ethernet driver <strong>ONLY</strong> in standalone mode (i.e. …\n@brief Ethernet driver state\n&lt; Deinit done\n&lt; Duplex updated\n&lt; Link status changed\n&lt; Lowlevel init done\n&lt; Pause ability updated\n&lt; Speed updated\n@brief Stop Ethernet driver\n@brief General Transmit\n@brief Special Transmit with variable number of arguments\n@brief Update Ethernet data input path (i.e. specify where …\n@brief ETM channel configuration\n@brief Connect an ETM event to an ETM task via a …\n@brief Disable ETM channel\n@brief Enable ETM channel\n@brief ETM channel handle\n@brief Delete an ETM channel\n@brief Delete ETM event\n@brief Delete ETM task\n@brief Dump ETM channel usages to the given IO stream\n@brief ETM event handle\n@brief Allocate an ETM channel\n@brief ETM task handle\n@brief Dumps statistics of all event loops.\n@brief Register an instance of event handler to the …\n@brief Register an instance of event handler to a specific …\n@brief Unregister a handler from the system event loop.\n@brief Unregister a handler instance from a specific event …\n@brief Register an event handler to the system event loop …\n@brief Register an event handler to a specific loop …\n@brief Unregister a handler with the system event loop …\n@brief Unregister a handler from a specific event loop …\n@brief Special variant of esp_event_post for posting …\n@brief Special variant of esp_event_post_to for posting …\nConfiguration for creating event loops\n@brief Create a new event loop.\n@brief Create default event loop\n@brief Delete an existing event loop.\n@brief Delete the default event loop\n@brief Dispatch events posted to an event loop.\n@brief Posts an event to the system default event loop. …\n@brief Posts an event to the specified event loop. The …\n@brief Fill a buffer with random bytes from hardware RNG\nCheck if appropriate chip driver is set.\n@brief Pointer to the “default” SPI flash chip, ie the …\n@brief Erase flash chip contents\n@brief Erase a region of the flash chip\n@brief Read if the entire chip is write protected\n@brief Detect flash size based on flash ID.\n@brief Read the list of individually protectable regions …\n@brief Detect if a region of the SPI flash chip is …\n@brief Detect flash size based on flash ID.\n@brief Initialise SPI flash chip interface.\n@brief Mode used for reading from SPI flash\n&lt; Both address &amp; data transferred using dual I/O\n&lt; Data read using dual I/O\n&lt; Data read using single I/O, no limit on speed\n&lt; Only support on OPI flash, flash read and write under …\n&lt; Only support on OPI flash, flash read and write under …\n&lt; Both address &amp; data transferred using quad I/O\n&lt; Data read using quad I/O\n&lt; The fastest io mode supported by the host is …\n&lt; Data read using single I/O, some limits on speed\n@brief OS-level integration hooks for accessing flash …\n@brief Read data from the SPI flash chip\n@brief Read and decrypt data from the SPI flash chip using …\n@brief Read flash ID via the common “RDID” SPI flash …\n@brief Read flash unique ID via the common “RDUID” SPI …\n@brief Structure for describing a region of flash\n@brief Set write protection for the SPI flash chip\n@brief Update the protected status for a region of the SPI …\n@brief SPI flash clock speed values, always refer to them …\n&lt; The flash runs under 10MHz\n&lt; The flash runs under 120MHz, 120MHZ can only be used by …\n&lt; The flash runs under 20MHz\n&lt; The flash runs under 26MHz\n&lt; The flash runs under 40MHz\n&lt; The flash runs under 5MHz\n&lt; The flash runs under 80MHz\n&lt; The maximum frequency supported by the host is …\n@brief SPI flash clock speed values, always refer to them …\n@brief Structure to describe a SPI flash chip connected to …\n@brief Write data to the SPI flash chip\n@brief Encrypted and write data to the SPI flash chip …\n\\brief          The GCM context structure.\n@brief Get current wake from deep sleep stub @return …\n@brief  Get the size of available heap.\n@brief  Get the size of available internal heap.\nReturn full IDF version string, same as ‘git describe’ …\n@brief Get the minimum heap that has ever been available\n@brief HMAC-MD5 over data buffer (RFC 2104)’\n@brief HMAC-MD5 over data vector (RFC 2104)\n@brief HMAC-SHA1 over data buffer (RFC 2104)\n@brief HMAC-SHA1 over data vector (RFC 2104)\n@brief The SHA256 callback function when do WPS connect.\n@brief      On receiving HTTP Status code 401, this API …\n@brief HTTP Authentication type\n&lt; HTTP Basic authentication\n&lt; HTTP Disgest authentication\n&lt; No authention\n@brief       Cancel an ongoing HTTP request. This API …\n@brief      This function must be the last function to …\n@brief      Close http connection, still kept all http …\n@brief HTTP configuration\n@brief      Delete http request header\n@brief      HTTP Client events data\n@brief   HTTP Client events id\n&lt; The connection has been disconnected\n&lt; This event occurs when there are any errors during …\n&lt; After sending all the headers to the server\n&lt; This header has been kept for backward compatability and …\n&lt; Once the HTTP has been connected to the server, no data …\n&lt; Occurs when receiving data from the server, possibly …\n&lt; Occurs when finish a HTTP session\n&lt; Occurs when receiving each header sent from the server\n&lt; Intercepting HTTP redirects to handle them manually\n@brief      HTTP Client events data\n@brief      This function need to call after …\n@brief       Process all remaining response data This uses …\n@brief          Get Chunk-Length from client\n@brief      Get http response content length (from header …\n@brief      Get HTTP client session errno\n@brief      Get http request header. The value parameter …\n@brief      Get http request password. The address of …\n@brief      Get current post field information\n@brief      Get http response status code, the valid value …\n@brief      Get transport type\n@brief          Get URL from client\n@brief      Get http request user_data. The value stored …\n@brief      Get http request username. The address of …\n@brief      Start a HTTP session This function must be the …\n@brief      Check response data is chunked\n@brief      Checks if entire data in the response has been …\n@brief HTTP method\n&lt; HTTP COPY Method\n&lt; HTTP DELETE Method\n&lt; HTTP GET Method\n&lt; HTTP HEAD Method\n&lt; HTTP LOCK Method\n&lt; HTTP MKCOL Method\n&lt; HTTP MOVE Method\n&lt; HTTP NOTIFY Method\n&lt; HTTP OPTIONS Method\n&lt; HTTP PATCH Method\n&lt; HTTP POST Method\n&lt; HTTP PROPFIND Method\n&lt; HTTP PROPPATCH Method\n&lt; HTTP PUT Method\n&lt; HTTP SUBSCRIBE Method\n&lt; HTTP UNLOCK Method\n&lt; HTTP UNSUBSCRIBE Method\n@brief      Argument structure for HTTP_EVENT_ON_DATA event\n@brief      Argument structure for HTTP_EVENT_ON_DATA event\n@brief      This function will be open the connection, …\n@brief      Invoke this function after <code>esp_http_client_init</code>…\n@brief      Read data from http stream\n@brief      Helper API to read larger data chunks This is …\n@brief      Argument structure for HTTP_EVENT_REDIRECT …\n@brief      Argument structure for HTTP_EVENT_REDIRECT …\n@brief      Set http request auth_type.\n@brief      Set http request header, this function must be …\n@brief      Set http request method\n@brief      Set http request password. The value of …\n@brief      Set post data, this function must be called …\n@brief      Set redirection URL. When received the 30x …\n@brief      Set http request timeout\n@brief      Set URL for client, when performing this …\n@brief      Set http request user_data. The value passed …\n@brief      Set http request username. The value of …\n@brief      HTTP Client transport\n&lt; Transport over ssl\n&lt; Transport over tcp\n&lt; Unknown\n@brief     This function will write data to the HTTP …\nArgument structure for HTTP_SERVER_EVENT_ON_DATA and …\n@brief   HTTP Server events id\n&lt; The connection has been disconnected\n&lt; This event occurs when there are any errors during …\n&lt; After sending all the headers to the client\n&lt; Once the HTTP Server has been connected to the client, …\n&lt; Occurs when receiving data from the client\n&lt; Occurs when receiving each header sent from the client\n&lt; Occurs when an ESP HTTP server session is finished\n&lt; This event occurs when HTTP Server is started\n&lt; This event occurs when HTTP Server is stopped\n@brief  Set custom MAC address of the interface. This …\n@brief Supported SPI flash sizes\n&lt; SPI flash size 128 MB\n&lt; SPI flash size 16 MB\n&lt; SPI flash size 1 MB\n&lt; SPI flash size 2 MB\n&lt; SPI flash size 32 MB\n&lt; SPI flash size 4 MB\n&lt; SPI flash size 64 MB\n&lt; SPI flash size 8 MB\n&lt; SPI flash size MAX\n@brief Get the flash size of the image\n@brief Get metadata of app\n@brief Main header of binary image\n@brief Header of binary image segment\n@brief SPI flash clock division factor.\n&lt; The SPI flash clock frequency equals to the clock source\n&lt; The SPI flash clock frequency is divided by 2 of the …\n&lt; The SPI flash clock frequency is divided by 3 of the …\n&lt; The SPI flash clock frequency is divided by 4 of the …\n@brief SPI flash mode, used in esp_image_header_t\n&lt; SPI mode DIO\n&lt; SPI mode DOUT\n&lt; SPI mode FAST_READ\n&lt; SPI mode QIO\n&lt; SPI mode QOUT\n&lt; SPI mode SLOW_READ\n@brief Verify an app image.\n@brief Verify the bootloader image.\n@brief Verify the bootloader image.\n@brief Enable the interrupt watchdog on the current CPU.\n@brief Initialize the non-CPU-specific parts of interrupt …\n&lt; Ethernet interface\n&lt; Soft-AP interface\n&lt; NAN interface\n&lt; Station interface\n\\brief           Internal AES block decryption function …\n\\brief           Internal AES block encryption function …\n@brief Allocate an interrupt with the given parameters.\n@brief Allocate an interrupt with the given parameters.\n@brief Disable the interrupt associated with the handle\n@brief disable the interrupt source based on its number …\n@brief Enable the interrupt associated with the handle\n@brief enable the interrupt source based on its number …\n@brief Disable and free an interrupt.\n@brief Get CPU number an interrupt is tied to\n@brief Get the allocated interrupt for a certain handle\n@brief Mark an interrupt as a shared interrupt\n@brief Disable interrupts that aren’t specifically …\n@brief Re-enable interrupts disabled by …\n@brief Reserve an interrupt to be used outside of this …\n@brief Set the “in IRAM” status of the handler.\n@brief IPv4 address\n@brief IPv4 address\n@brief Ascii internet address interpretation routine The …\n@brief Converts numeric IP address into decimal dotted …\n@brief IPv6 address\n@brief IPv6 address\n@brief IP address\n@cond <em>/ /</em>* @brief LCD color space type definition (WRONG!) …\n&lt; Color space: BGR\n&lt; Color space: monochrome\n&lt; Color space: RGB\n@brief Create LCD panel IO handle, for I2C interface\n@brief Create LCD panel IO handle, for SPI interface\n@brief Create LCD panel for model NT35510\n@brief Create LCD panel for model SSD1306\n@brief Create LCD panel for model ST7789\n@brief Deinitialize the LCD panel\n@brief Configuration structure for panel device\n@brief Turn off the display\n@brief Turn on or off the display\n@brief Draw bitmap on LCD panel\n@brief Initialize LCD panel\n@brief Invert the color (bit-wise invert the color data …\n@brief Type of LCD panel IO callbacks\n@brief Declare the prototype of the function that will be …\n@brief Destroy LCD panel IO handle (deinitialize panel and …\n@brief Type of LCD panel IO event data\n@brief Panel IO configuration structure, for I2C interface\n@brief Register LCD panel IO callbacks\n@brief Transmit LCD command and receive corresponding …\n@brief Panel IO configuration structure, for SPI interface\n@brief LCD panel IO interface\n@brief Transmit LCD RGB data\n@brief Transmit LCD command and corresponding parameters\n@brief Mirror the LCD panel on specific axis\n@brief Reset LCD panel\n@brief Set extra gap in x and y axis\n@brief Swap/Exchange x and y axis\n@brief LCD panel interface\n@brief Enter light sleep with the configured wakeup options\n@brief Line ending settings\n!&lt; CR\n!&lt; CR + LF\n!&lt; LF\n@brief Default log level\n@brief Function which returns timestamp to be used in log …\n@brief Get log level for a given tag, can be used to avoid …\n@brief Set log level for given tag\n@brief Log level\n&lt; Extra information which is not necessary for normal use …\n&lt; Critical errors, software module can not recover on its …\n&lt; Information messages which describe normal flow of events\n&lt; No log output\n&lt; Bigger chunks of debugging information, or frequent …\n&lt; Error conditions from which recovery measures have been …\n@brief Set function used to output log entries\n@brief Function which returns system timestamp to be used …\n@brief Function which returns timestamp to be used in log …\n@brief Write message into the log\n@brief  Return the size of the MAC type in bytes.\n&lt; Base MAC for that used for other MAC types (6 bytes)\n&lt; MAC for Bluetooth (6 bytes)\n&lt; MAC_CUSTOM eFuse which was can be burned by customer (6 …\n&lt; if CONFIG_SOC_IEEE802154_SUPPORTED=y, MAC_EXT eFuse …\n&lt; MAC_FACTORY eFuse which was burned by Espressif in …\n&lt; MAC for Ethernet (6 bytes)\n&lt; if CONFIG_SOC_IEEE802154_SUPPORTED=y, MAC for IEEE802154 …\n&lt; MAC for WiFi Soft-AP (6 bytes)\n&lt; MAC for WiFi Station (6 bytes)\n\\brief          Clone (the state of) an MD5 context\n\\brief          MD5 final digest\n\\brief          Clear MD5 context\n\\brief          Initialize MD5 context\n\\brief          MD5 process data block (internal use only)\n\\brief          MD5 process buffer\n@brief MD5 hash for data vector\n@brief      Set whether allow more than one root existing …\n@brief      Return the number of packets could be accepted …\n@brief      Connect to current parent\n@brief      Mesh de-initialization\n@brief      Delete group ID addresses\n@brief      Disable mesh Power Save function\n@brief      Disconnect from current parent\n@brief      Enable mesh Power Save function\n@brief      Enable network Fixed Root Setting - Enabling …\n@brief      Flush scan result\n@brief      Flush upstream packets pending in to_parent …\n@brief      Get device duty cycle and type\n@brief      Get announce interval\n@brief      Get mesh softAP associate expired time\n@brief      Get mesh softAP authentication mode\n@brief      Get mesh max connection configuration\n@brief      Get attempts for mesh self-organized networking\n@brief      Get mesh softAP beacon interval\n@brief      Get mesh network capacity\n@brief      Get mesh stack configuration\n@brief      Get group ID addresses\n@brief      Get the number of group ID addresses\n@brief      Get mesh network ID\n@brief      Get mesh IE crypto key\n@brief      Get current layer value over the mesh network\n@brief      Get max layer value\n@brief      Get the network duty cycle, duration, type and …\n@brief      Get non-mesh max connection configuration\n@brief      Get the parent BSSID\n@brief      Get passive scan time\n@brief      Get delay time before network starts root …\n@brief      Get router configuration\n@brief      Get the router BSSID\n@brief      Get routing table of this device’s …\n@brief      Get the number of devices in this device’s …\n@brief      Get RSSI threshold\n@brief      Get the running active duty cycle - The …\n@brief      Return the number of packets available in the …\n@brief      Return whether enable self-organized …\n@brief      Get nodes in the subnet of a specific child\n@brief      Get the number of nodes in the subnet of a …\n@brief      Get parameters for parent switch\n@brief      Get mesh topology\n@brief      Get total number of devices in current network …\n@brief      Get the TSF time\n@brief      Return the number of packets pending in the …\n@brief      Get device type over mesh network\n@brief      Get vote percentage threshold for approval of …\n@brief      Get queue size\n@brief      Check whether the device is in active state - …\n@brief      Check whether the specified group address is …\n@brief      Check whether the mesh Power Save function is …\n@brief      Return whether the device is the root node of …\n@brief      Check whether allow more than one root to …\n@brief      Check whether network Fixed Root Setting is …\n@brief      Post the toDS state to the mesh stack\n@brief      Print the number of rxQ waiting\n@brief      Enable mesh print scan result\n@brief      Print the number of txQ waiting\n@brief Mesh PS duties\n@brief      Duty signaling\n@brief      Get the running duties of device, parent and …\n@brief      Receive a packet targeted to self over the …\n@brief      Receive a packet targeted to external IP …\n@brief      Get mesh networking IE length of one AP\n@brief      Get AP record\n@brief      Send a packet over the mesh network - Send a …\n@brief      Set blocking time of esp_mesh_send()\n@brief      Enable the minimum rate to 6 Mbps\n@brief      Set the device duty cycle and type - The range …\n@brief      Set announce interval - The default short …\n@brief      Set mesh softAP associate expired time …\n@brief      Set mesh softAP authentication mode\n@brief      Set mesh max connection value - Set mesh …\n@brief      Set mesh softAP password\n@brief     Set attempts for mesh self-organized networking\n@brief      Set mesh network capacity (max:1000, …\n@brief      Set mesh stack configuration - Use …\n@brief      Set group ID addresses\n@brief      Set mesh network ID\n@brief      Set mesh IE crypto functions\n@brief      Set mesh IE crypto key\n@brief      Set network max layer value - for tree …\n@brief      Set the network duty cycle, duration and rule …\n@brief      Set a specified parent for the device\n@brief      Set passive scan time\n@brief      Set delay time before starting root healing\n@brief      Get router configuration\n@brief      Set RSSI threshold - The default high RSSI …\n@brief      Enable/disable self-organized networking - …\n@brief      Set parameters for parent switch\n@brief      Set mesh topology. The default value is …\n@brief      Designate device type over the mesh network - …\n@brief      Set vote percentage threshold for approval of …\n@brief      Set the number of RX queue for the node, the …\n@brief      Start mesh - Initialize mesh IE. - Start mesh …\n@brief      Stop mesh - Deinitialize mesh IE. - Disconnect …\n@brief      Cause the root device to add Channel Switch …\n@brief Mesh topology\n&lt; chain topology\n&lt; tree topology\n@brief      Cause the root device to give up (waive) its …\n@brief Lock access to RSA Accelerator (MPI/bignum …\n@brief Unlock access to RSA Accelerator (MPI/bignum …\n<em>MQTT</em> client configuration structure\nBroker related configuration\nBroker address\nBroker identity verification\nClient buffer size configuration\nClient related credentials for authentication.\nClient authentication\nNetwork related configuration\nClient outbox configuration options.\n<em>MQTT</em> Session related configuration\nLast Will and Testament message configuration.\nClient task configuration\n@brief Destroys the client handle\n@brief This api is typically used to force disconnection …\n@brief Enqueue a message to the outbox, to be sent later. …\n@brief Get outbox size\n@brief Creates <em>MQTT</em> client handle based on the …\n@brief Client to send a publish message to the broker\n@brief This api is typically used to force reconnection …\n@brief Registers <em>MQTT</em> event\n@brief Sets <em>MQTT</em> connection URI. This API is usually used …\n@brief Starts <em>MQTT</em> client with already created client …\n@brief Stops <em>MQTT</em> client tasks\n@brief Subscribe the client to a list of defined topics …\n@brief Subscribe the client to defined topic with defined …\n@brief Unregisters mqtt event\n@brief Unsubscribe the client from defined topic\n<em>MQTT</em> connection error codes propagated via ERROR event\n&lt; Connection accepted\n&lt; <em>MQTT</em> connection refused reason: Wrong user\n&lt; <em>MQTT</em> connection refused reason: ID rejected\n&lt; <em>MQTT</em> connection refused reason: Wrong username or …\n&lt; <em>MQTT</em> connection refused reason: Wrong protocol\n&lt; <em>MQTT</em> connection refused reason: Server unavailable\n@brief Dispatch user event to the mqtt internal event loop\n@brief <em>MQTT</em> error code structure to be passed as a …\n@brief <em>MQTT</em> error code structure to be passed as a …\n<em>MQTT</em> connection error codes propagated via ERROR event\n@brief <em>MQTT</em> event types.\n&lt; The event occurs before connecting\n&lt; connected event, additional context: session_present flag\n&lt; data event, additional context:\n&lt; Notification on delete of one message from the internal …\n&lt; disconnected event\n&lt; published event, additional context:  msg_id\n&lt; subscribed event, additional context:\n&lt; unsubscribed event, additional context:  msg_id\n&lt; Custom event used to queue tasks into mqtt event handler …\n<em>MQTT</em> event configuration structure\n<em>MQTT</em> protocol version used for connection\n@brief Set configuration structure, typically used when …\nTopic definition struct\n&lt; <em>MQTT</em> over SSL, using scheme: <code>MQTTS</code>\n&lt; <em>MQTT</em> over TCP, using scheme: <code>MQTT</code>\n&lt; <em>MQTT</em> over Websocket, using scheme:: <code>ws</code>\n&lt; <em>MQTT</em> over Websocket Secure, using scheme: <code>wss</code>\n@brief      End NAN Datapath that is active\n@brief      Send Datapath Request to the Publisher with …\n@brief      Send Datapath Response to accept or reject the …\n@brief      Start Publishing a service in the NAN cluster\n@brief      Send Follow-up to the Publisher with matching …\n@brief      Subscribe for a service within the NAN cluster\n&lt; Pointer to corresponding esp-netif object\n&lt; Pointer to corresponding esp-netif object\n&lt; Pointer to the associated netif handle\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief Default building block for network interface action …\n@brief   Attaches esp_netif instance to the io driver …\n@brief Attaches wifi soft AP interface to supplied netif\n@brief Attaches wifi station interface to supplied netif\n@brief  TCPIP thread safe callback used with …\n@brief  Generic esp_netif configuration\n@brief  Generic esp_netif configuration\n@brief Creates default WIFI AP. In case of any init error …\n@brief Creates default STA and AP network interfaces for …\n@brief Creates default WIFI NAN. In case of any init error …\n@brief Creates default WIFI STA. In case of any init error …\n@brief  Create interface link-local IPv6 address\n@brief Creates esp_netif WiFi object based on the custom …\n@brief  Deinitialize the esp-netif component (and the …\n@brief   Destroys the esp_netif object\n@brief Destroys default WIFI netif created with …\n@brief Supported options for DHCP client or DHCP server\n&lt; Domain name server\n&lt; Request IP address lease time\n&lt; Request IP address retry counter\n&lt; Request specific IP address\n&lt; Solicitation router address\n&lt; Network mask\n&lt; Vendor Class Identifier of a DHCP client\n&lt; Vendor Specific Information of a DHCP server\n@brief Mode for DHCP client or DHCP server option functions\n&lt; Get option\n&lt; Set option\n@brief Status of DHCP client or DHCP server\n&lt; DHCP client/server is in initial state (not yet started)\n&lt; DHCP client/server has been started\n&lt; DHCP client/server has been stopped\n@brief  Get DHCP client status\n@brief  Set or Get DHCP client option\n@brief Start DHCP client (only if enabled in interface …\n@brief  Stop DHCP client (only if enabled in interface …\n@brief  Populate IP addresses of clients connected to DHCP …\n@brief  Get DHCP Server status\n@brief  Set or Get DHCP server option\n@brief  Start DHCP server (only if enabled in interface …\n@brief  Stop DHCP server (only if enabled in interface …\n@brief DNS server info\n@brief Type of DNS server\n&lt; DNS backup server address (Wi-Fi STA and Ethernet only)\n&lt; DNS fallback server address (Wi-Fi STA and Ethernet only)\n&lt; DNS main server address\n@brief ESP-netif driver base handle\n@brief ESP-netif driver base handle\n@brief  Specific IO driver configuration\n@brief  Specific IO driver configuration\n@brief  Get all IPv6 addresses of the specified interface\n@brief Getter function of the default netif\n@brief Returns configured interface type for this …\n@brief  Get DNS Server information\n@brief Returns configured event for this esp-netif …\n@brief Returns configured flags for this interface\n@brief Searches over a list of created objects to find an …\n@brief  Get interface hostname.\n@brief Returns configured interface key for this esp-netif …\n@brief Gets media driver handle for this esp-netif instance\n@brief  Get interface global IPv6 address\n@brief  Get interface link-local IPv6 address\n@brief  Get interface’s IP address information\n@brief Get the mac address for the interface instance\n@brief  Get net interface index from network stack …\n@brief  Get net interface name from network stack …\n@brief Returns number of registered esp_netif objects\n@brief  Get interface’s old IP information\n@brief Returns configured routing priority number\n@brief ESP-netif inherent config parameters\n@brief ESP-netif inherent config parameters\n@brief  Initialize the underlying TCP/IP stack\n@brief  IO driver handle type\n@brief  Get the IPv6 address type\n@brief IPV6 IP address information\nEvent structure for IP_EVENT_STA_GOT_IP, …\n@brief  Test if supplied interface is up or down\n@brief  Cause the TCP/IP stack to join a IPv6 multicast …\n@brief  Cause the TCP/IP stack to leave a IPv6 multicast …\n@brief  Disable NAPT on an interface.\n@brief  Enable NAPT on an interface\n@brief free the netstack buffer\n@brief increase the reference counter of net stack buffer\n@brief  Specific L3 network stack configuration\n@brief   Creates an instance of new esp-netif object based …\n@brief Iterates over list of interfaces. Returns first …\n@brief Type of esp_netif_object server\n@brief DHCP client’s addr info (pair of MAC and IP …\n@brief  Passes the raw packets from communication media to …\n@brief  ESP-NETIF Receive function type\n@brief Manual configuration of the default netif\n@brief  Set DNS Server information\n@brief   Configures driver related options of esp_netif …\n@brief  Set the hostname of an interface\n@brief Sets IPv4 address to the specified octets\n@brief  Set interface’s IP address information\n@brief Set the mac address for the interface instance\n@brief  Set interface old IP information\n@brief Deinitialize esp_netif SNTP module\n@brief Initialize SNTP with supplied config struct @param …\n@brief Start SNTP service if it wasn’t started during …\n@brief Wait for time sync event @param tout Specified …\n@brief Converts Ascii internet IPv4 address into …\n@brief Converts Ascii internet IPv6 address into …\n@brief Utility to execute the supplied callback in TCP/IP …\nFunction which sets up newlib in ROM for use with ESP-IDF\nInitialize newlib static locks\nPanic with an error-specific message if <code>err</code> is not <code>ESP_OK</code>.\n@brief     Add a peer to peer list\n@brief     De-initialize ESPNOW function\n@brief     Delete a peer from peer list\n@brief     Fetch a peer from peer list. Only return the …\n@brief     Get a peer whose MAC address matches peer_addr …\n@brief     Get the number of peers\n@brief     Get the version of ESPNOW\n@brief     Initialize ESPNOW function\n@brief     Peer exists or not\n@brief     Modify a peer\n@brief ESPNOW peer information parameters.\n@brief ESPNOW peer information parameters.\n@brief Number of ESPNOW peers which exist currently.\n@brief Number of ESPNOW peers which exist currently.\n@brief ESPNOW rate config\n@brief ESPNOW rate config\n@brief     Callback function of receiving ESPNOW data …\n@brief ESPNOW packet information\n@brief ESPNOW packet information\n@brief     Register callback function of receiving ESPNOW …\n@brief     Register callback function of sending ESPNOW …\n@brief     Send ESPNOW data\n@brief     Callback function of sending ESPNOW data @param …\n@brief Status of sending ESPNOW data .\n&lt; Send ESPNOW data fail\n&lt; Send ESPNOW data successfully\n@brief      Set ESPNOW rate config for each peer\n@brief     Set the primary master key\n@brief     Set wake window for esp_now to wake up in …\n@brief     Unregister callback function of receiving …\n@brief     Unregister callback function of sending ESPNOW …\n@brief One-Key CBC MAC (OMAC1) hash with AES-128 for MIC …\n@brief Abort OTA update, free the handle and memory …\n@brief   Commence an OTA update writing to the specified …\n@brief Checks applications on the slots which can be …\n@brief Finish OTA update and validate newly written app …\n@brief Erase previous boot app partition and corresponding …\n@brief   Return esp_app_desc structure. This structure …\n@brief   Fill the provided buffer with SHA256 of the ELF …\n@brief Returns number of ota partitions provided in …\n@brief Get partition info of currently configured boot app\n@brief Returns last partition with invalid state …\n@brief Return the next OTA app partition which should be …\n@brief Returns esp_app_desc structure for app partition. …\n@brief Get partition info of currently running app\n@brief Returns state for given partition.\n@brief Opaque handle for an application OTA update\nOTA_DATA states for checking operability of the app.\n&lt; App could not confirm the workable or non-workable. In …\n&lt; App was confirmed as non-workable. This app will not …\n&lt; Monitor the first boot. In bootloader this state is …\n&lt; First boot for this app was. If while the second boot …\n&lt; Undefined. App can boot and work without limits.\n&lt; App was confirmed as workable. App can boot and work …\n@brief This function is called to roll back to the …\n@brief This function is called to indicate that the …\n@brief Configure OTA data for a new boot partition\n@brief   Write OTA update data to partition\n@brief   Write OTA update data to partition at an offset\n@brief Check for the identity of two partitions by SHA-256 …\n@brief Deregister the partition previously registered …\n@brief Erase part of the partition\n@brief Find partition based on one or more parameters\n@brief Find first partition based on one or more parameters\n@brief Get esp_partition_t structure for given partition\n@brief Get SHA-256 digest for required partition.\n@brief Release partition iterator\n@brief Opaque partition iterator type\nCheck whether the region on the main flash is safe to …\n@brief Configure MMU to map partition into data memory\n@brief Opaque handle for memory region obtained from …\n@brief Enumeration which specifies memory space requested …\n&lt; map to data memory (Vaddr0), allows byte-aligned access, …\n&lt; map to instruction memory (Vaddr1-3), allows only …\n@brief Release region previously obtained using …\n@brief Move partition iterator to the next partition found\n@brief Read data from the partition\n@brief Read data from the partition without any …\n@brief Register a partition on an external flash chip\n@brief Partition subtype\n!&lt; Used to search for partitions with any subtype\n!&lt; Factory application partition\n!&lt; OTA partition 0\n!&lt; OTA partition 1\n!&lt; OTA partition 10\n!&lt; OTA partition 11\n!&lt; OTA partition 12\n!&lt; OTA partition 13\n!&lt; OTA partition 14\n!&lt; OTA partition 15\n!&lt; OTA partition 2\n!&lt; OTA partition 3\n!&lt; OTA partition 4\n!&lt; OTA partition 5\n!&lt; OTA partition 6\n!&lt; OTA partition 7\n!&lt; OTA partition 8\n!&lt; OTA partition 9\n!&lt; Max subtype of OTA partition\n!&lt; Base for OTA partition subtypes\n!&lt; Test application partition\n!&lt; COREDUMP partition\n!&lt; Partition for emulate eFuse bits\n!&lt; ESPHTTPD partition\n!&lt; FAT partition\n!&lt; NVS partition\n!&lt; Partition for NVS keys\n!&lt; OTA selection partition\n!&lt; PHY init data partition\n!&lt; SPIFFS partition\n!&lt; Undefined (or unspecified) data partition\n@brief partition information structure\n@brief Partition type\n!&lt; Used to search for partitions with any type\n!&lt; Application partition type\n!&lt; Data partition type\n@brief Verify partition data\n@brief Write data to the partition\n@brief Write data to the partition without any …\n@brief SHA1-based key derivation function (PBKDF2) for …\n@brief Type of “ping” callback functions\n@brief Type of “ping” configuration\n@brief Delete a ping session\n@brief Get runtime profile of ping session\n@brief Type of “ping” session handle\n@brief Create a ping session\n@brief Profile of ping session\n&lt; Elapsed time of the whole ping session\n&lt; IP address of replied target\n&lt; Number of reply packets received\n&lt; Number of request packets sent out\n&lt; Sequence number of a ping procedure\n&lt; Size of received packet\n&lt; Elapsed time between request and reply packet\n&lt; Type of service of a ping procedure\n&lt; Time to live of a ping procedure\n@brief Start the ping session\n@brief Stop the ping session\nbackward compatibility newer chips no longer require this …\n@brief Power management config\n@brief Power management config\n@brief Power management config\n@brief Power management config\n@brief Power management config\n@brief Power management config\n@brief Set implementation-specific power management …\nDump the list of all locks to stderr\n@brief Get implementation-specific power management …\n@brief Take a power management lock\n@brief Initialize a lock handle for certain power …\n@brief Delete a lock created using esp_pm_lock\n@brief Opaque handle to the power management lock\n@brief Release the lock taken using esp_pm_lock_acquire.\n@brief Power management constraints\nRequire APB frequency to be at the maximum value supported …\nRequire CPU frequency to be at the maximum value set via …\nPrevent the system from going into light sleep. Argument …\n@brief Get the available size of the attached PSRAM chip\n@brief Initialize PSRAM interface/hardware.\n@brief If PSRAM has been initialized\npthread configuration structure that influences pthread …\n@brief Get current pthread creation configuration\n@brief Creates a default pthread configuration based on …\n@brief Initialize pthread library\n@brief Configure parameters for creating pthread\n@brief  Get one random 32-bit word from hardware RNG\n@brief XOR RC4 stream to given data with skip-stream-start\n@brief  Read base MAC address and set MAC address of the …\nClean up some of lazily allocated buffers in REENT …\nReplacement for newlib’s _REENT_INIT_PTR and __sinit.\n@brief  Register a callback to the idle hook of the core …\n@brief  Register a callback to be called from the …\n@brief  Register a callback to be called from the calling …\n@brief  Register a callback to be called from the …\n@brief  Register shutdown handler\n@brief  Get reason of last reset @return See description …\n@brief Reset reasons\n!&lt; Brownout reset (software or hardware)\n!&lt; Reset after exiting deep sleep mode\n!&lt; Reset by external pin (not applicable for ESP32)\n!&lt; Reset (software or hardware) due to interrupt watchdog\n!&lt; Software reset due to exception/panic\n!&lt; Reset due to power-on event\n!&lt; Reset over SDIO\n!&lt; Software reset via esp_restart\n!&lt; Reset due to task watchdog\n!&lt; Reset reason can not be determined\n!&lt; Reset due to other watchdogs\n@brief  Restart PRO and APP CPUs.\nConvert an <code>esp_err_t</code> into a <code>Result&lt;T, EspError&gt;</code>.\n@brief CRC16 value in big endian.\n@brief CRC16 value in little endian.\n@brief CRC32 value in big endian.\n@brief CRC32 value in little endian.\n@brief CRC8 value in big endian.\n@brief CRC8 value in little endian.\n@brief Pauses execution for us microseconds\n@brief Get the real CPU ticks per us\n@brief Get reset reason of CPU\n@brief Combine a GPIO input with a peripheral signal, …\n@brief Combine a peripheral signal which tagged as output …\n@brief Enable internal pull up, and disable internal pull …\n@brief Configure IO Pad as General Purpose IO, so that it …\n@brief Set IO Pad current drive capability.\n@brief Unhold the IO Pad. @note When the Pad is set to …\n@brief esp_rom_printf can print message to different …\n@brief Install UART1 as the default console channel, …\n@brief Extract the MD5 result, and erase the context\n@brief Initialize the MD5 context\n@brief Running MD5 algorithm over input data\n@brief Print formated string to console device @note float …\n@brief Route peripheral interrupt sources to CPU’s …\n@brief Set the real CPU tick rate\n@brief Software Reset cpu core.\n@brief Software Reset digital core include RTC.\n@brief  Check RRM capability of connected AP\n@brief  Send Radio measurement neighbor report request to …\n@brief Pointers to the trusted key digests.")